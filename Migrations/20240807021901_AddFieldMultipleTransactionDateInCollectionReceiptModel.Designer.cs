// <auto-generated />
using System;
using Accounting_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accounting_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240807021901_AddFieldMultipleTransactionDateInCollectionReceiptModel")]
    partial class AddFieldMultipleTransactionDateInCollectionReceiptModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.CheckVoucherHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccruedType")
                        .HasColumnType("text")
                        .HasColumnName("accrued_type");

                    b.Property<decimal[]>("Amount")
                        .HasColumnType("numeric[]")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("AmountPerMonth")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_per_month");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("CVNo")
                        .HasColumnType("text")
                        .HasColumnName("cv_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("check_amount");

                    b.Property<DateOnly?>("CheckDate")
                        .HasColumnType("date")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CvType")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cv_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<DateTime?>("LastCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_created_date");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months");

                    b.Property<int>("NumberOfMonthsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months_created");

                    b.Property<string[]>("PONo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("po_no");

                    b.Property<string>("Particulars")
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("Payee")
                        .HasColumnType("text")
                        .HasColumnName("payee");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string[]>("RRNo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("rr_no");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string[]>("SINo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("si_no");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("Id")
                        .HasName("pk_check_voucher_headers");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_check_voucher_headers_bank_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_check_voucher_headers_supplier_id");

                    b.ToTable("check_voucher_headers", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.JournalVoucherDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_no");

                    b.HasKey("Id")
                        .HasName("pk_journal_voucher_details");

                    b.ToTable("journal_voucher_details", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("final_price");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_received");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<string>("PONo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("po_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductNo")
                        .HasColumnType("text")
                        .HasColumnName("product_no");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_received");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<int>("SupplierNo")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_no");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("terms");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("Id")
                        .HasName("pk_purchase_orders");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_purchase_orders_product_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_purchase_orders_supplier_id");

                    b.ToTable("purchase_orders", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<decimal>("CanceledQuantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("canceled_quantity");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("EwtAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ewt_amount");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_amount");

                    b.Property<decimal>("NetAmountOfEWT")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_amount_of_ewt");

                    b.Property<string>("OtherRef")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("other_ref");

                    b.Property<int>("POId")
                        .HasColumnType("integer")
                        .HasColumnName("po_id");

                    b.Property<string>("PONo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("po_no");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("QuantityDelivered")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_delivered");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_received");

                    b.Property<string>("RRNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("rr_no");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<string>("SupplierInvoiceDate")
                        .HasColumnType("text")
                        .HasColumnName("supplier_invoice_date");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier_invoice_number");

                    b.Property<string>("TruckOrVessels")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("truck_or_vessels");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("Id")
                        .HasName("pk_receiving_reports");

                    b.HasIndex("POId")
                        .HasDatabaseName("ix_receiving_reports_po_id");

                    b.ToTable("receiving_reports", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.CollectionReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CRNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("cr_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cash_amount");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("check_amount");

                    b.Property<string>("CheckBank")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("check_bank");

                    b.Property<string>("CheckBranch")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("check_branch");

                    b.Property<string>("CheckDate")
                        .HasColumnType("text")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("check_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("EWT")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("ewt");

                    b.Property<string>("F2306FilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("f2306file_path");

                    b.Property<string>("F2307FilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("f2307file_path");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsCertificateUpload")
                        .HasColumnType("boolean")
                        .HasColumnName("is_certificate_upload");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<decimal>("ManagerCheckAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("manager_check_amount");

                    b.Property<string>("ManagerCheckBank")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("manager_check_bank");

                    b.Property<string>("ManagerCheckBranch")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("manager_check_branch");

                    b.Property<DateOnly?>("ManagerCheckDate")
                        .HasColumnType("date")
                        .HasColumnName("manager_check_date");

                    b.Property<string>("ManagerCheckNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("manager_check_no");

                    b.Property<string[]>("MultipleSI")
                        .HasColumnType("text[]")
                        .HasColumnName("multiple_si");

                    b.Property<int[]>("MultipleSIId")
                        .HasColumnType("integer[]")
                        .HasColumnName("multiple_si_id");

                    b.Property<DateOnly[]>("MultipleTransactionDate")
                        .HasColumnType("date[]")
                        .HasColumnName("multiple_transaction_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("reference_no");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remarks");

                    b.Property<decimal[]>("SIMultipleAmount")
                        .HasColumnType("numeric[]")
                        .HasColumnName("si_multiple_amount");

                    b.Property<string>("SINo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("si_no");

                    b.Property<string>("SVNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("sv_no");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WVAT")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("wvat");

                    b.HasKey("Id")
                        .HasName("pk_collection_receipts");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_collection_receipts_customer_id");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_collection_receipts_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_collection_receipts_service_invoice_id");

                    b.ToTable("collection_receipts", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.CreditMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdjustedPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("adjusted_price");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CMNo")
                        .HasColumnType("text")
                        .HasColumnName("cm_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit_amount");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("services_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_sales");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unearned_amount");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WithHoldingTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_tax_amount");

                    b.Property<decimal>("WithHoldingVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_credit_memos");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_credit_memos_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_credit_memos_service_invoice_id");

                    b.ToTable("credit_memos", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.DebitMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdjustedPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("adjusted_price");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("DMNo")
                        .HasColumnType("text")
                        .HasColumnName("dm_no");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit_amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("services_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_sales");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unearned_amount");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WithHoldingTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_tax_amount");

                    b.Property<decimal>("WithHoldingVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_debit_memos");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_debit_memos_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_debit_memos_service_invoice_id");

                    b.ToTable("debit_memos", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.SalesInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsTaxAndVatPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tax_and_vat_paid");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<decimal>("NetDiscount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_discount");

                    b.Property<string>("OtherRefNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("other_ref_no");

                    b.Property<int>("POId")
                        .HasColumnType("integer")
                        .HasColumnName("po_id");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remarks");

                    b.Property<string>("SINo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("si_no");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatExempt")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_exempt");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WithHoldingTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_tax_amount");

                    b.Property<decimal>("WithHoldingVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("with_holding_vat_amount");

                    b.Property<decimal>("ZeroRated")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("zero_rated");

                    b.HasKey("Id")
                        .HasName("pk_sales_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sales_invoices_customer_id");

                    b.HasIndex("POId")
                        .HasDatabaseName("ix_sales_invoices_po_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_sales_invoices_product_id");

                    b.ToTable("sales_invoices", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.ServiceInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("Instructions")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_amount");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("SVNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("sv_no");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int>("ServiceNo")
                        .HasColumnType("integer")
                        .HasColumnName("service_no");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("services_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unearned_amount");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WithholdingTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("withholding_tax_amount");

                    b.Property<decimal>("WithholdingVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("withholding_vat_amount");

                    b.HasKey("Id")
                        .HasName("pk_service_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_service_invoices_customer_id");

                    b.HasIndex("ServicesId")
                        .HasDatabaseName("ix_service_invoices_services_id");

                    b.ToTable("service_invoices", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.ChartOfAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Parent")
                        .HasColumnType("text")
                        .HasColumnName("parent");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_chart_of_accounts");

                    b.ToTable("chart_of_accounts", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.CheckVoucherDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_no");

                    b.HasKey("Id")
                        .HasName("pk_check_voucher_details");

                    b.ToTable("check_voucher_details", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("business_style");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("terms");

                    b.Property<string>("TinNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin_no");

                    b.Property<bool>("WithHoldingTax")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_tax");

                    b.Property<bool>("WithHoldingVat")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_vat");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("average_cost");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cost");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("InventoryBalance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("inventory_balance");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_validated");

                    b.Property<int?>("POId")
                        .HasColumnType("integer")
                        .HasColumnName("po_id");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("reference");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_balance");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("unit");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("validated_by");

                    b.Property<DateTime?>("ValidatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventories");

                    b.HasIndex("POId")
                        .HasDatabaseName("ix_inventories_po_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_inventories_product_id");

                    b.ToTable("inventories", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.JournalVoucherHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CRNo")
                        .HasColumnType("text")
                        .HasColumnName("cr_no");

                    b.Property<int?>("CVId")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<string>("JVNo")
                        .HasColumnType("text")
                        .HasColumnName("jv_no");

                    b.Property<string>("JVReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jv_reason");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("References")
                        .HasColumnType("text")
                        .HasColumnName("references");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("Id")
                        .HasName("pk_journal_voucher_headers");

                    b.HasIndex("CVId")
                        .HasDatabaseName("ix_journal_voucher_headers_cv_id");

                    b.ToTable("journal_voucher_headers", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.MasterFile.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountNoCOA")
                        .HasColumnType("text")
                        .HasColumnName("account_no_coa");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("BankCode")
                        .HasColumnType("text")
                        .HasColumnName("bank_code");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.HasKey("Id")
                        .HasName("pk_bank_accounts");

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.MasterFile.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.MasterFile.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DefaultExpenseNumber")
                        .HasColumnType("text")
                        .HasColumnName("default_expense_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("ProofOfExemptionFilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("proof_of_exemption_file_path");

                    b.Property<string>("ProofOfRegistrationFilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("proof_of_registration_file_path");

                    b.Property<string>("ReasonOfExemption")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reason_of_exemption");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tax_type");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("terms");

                    b.Property<string>("TinNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tin_no");

                    b.Property<string>("TradeName")
                        .HasColumnType("text")
                        .HasColumnName("trade_name");

                    b.Property<string>("Validity")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("validity");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("date")
                        .HasColumnName("validity_date");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vat_type");

                    b.Property<int?>("WithholdingTaxPercent")
                        .HasColumnType("integer")
                        .HasColumnName("withholding_tax_percent");

                    b.Property<string>("WithholdingTaxtitle")
                        .HasColumnType("text")
                        .HasColumnName("withholding_taxtitle");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Offsetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_offsettings");

                    b.ToTable("offsettings", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("machine_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_audit_trails");

                    b.ToTable("audit_trails", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.CashReceiptBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank")
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("COA")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coa");

                    b.Property<string>("CheckNo")
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ref_no");

                    b.HasKey("Id")
                        .HasName("pk_cash_receipt_books");

                    b.ToTable("cash_receipt_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.DisbursementBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("CVNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cv_no");

                    b.Property<string>("ChartOfAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chart_of_account");

                    b.Property<string>("CheckDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payee");

                    b.HasKey("Id")
                        .HasName("pk_disbursement_books");

                    b.ToTable("disbursement_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.GeneralLedgerBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_general_ledger_books");

                    b.ToTable("general_ledger_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.JournalBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_journal_books");

                    b.ToTable("journal_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Reports.PurchaseJournalBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("discount");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_no");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("NetPurchases")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_purchases");

                    b.Property<string>("PONo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("po_no");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_address");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_tin");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("WhtAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("wht_amount");

                    b.HasKey("Id")
                        .HasName("pk_purchase_journal_books");

                    b.ToTable("purchase_journal_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.SalesBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("discount");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("NetSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_sales");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<string>("SoldTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sold_to");

                    b.Property<string>("TinNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin_no");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatExemptSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_exempt_sales");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<decimal>("ZeroRated")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("zero_rated");

                    b.HasKey("Id")
                        .HasName("pk_sales_books");

                    b.ToTable("sales_books", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CurrentAndPreviousNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("current_and_previous_no");

                    b.Property<string>("CurrentAndPreviousTitle")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("current_and_previous_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("Percent")
                        .HasColumnType("integer")
                        .HasColumnName("percent");

                    b.Property<string>("UnearnedNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unearned_no");

                    b.Property<string>("UnearnedTitle")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unearned_title");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Accounting_System.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.CheckVoucherHeader", b =>
                {
                    b.HasOne("Accounting_System.Models.MasterFile.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .HasConstraintName("fk_check_voucher_headers_bank_accounts_bank_id");

                    b.HasOne("Accounting_System.Models.MasterFile.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_check_voucher_headers_suppliers_supplier_id");

                    b.Navigation("BankAccount");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.PurchaseOrder", b =>
                {
                    b.HasOne("Accounting_System.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_orders_products_product_id");

                    b.HasOne("Accounting_System.Models.MasterFile.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_orders_suppliers_supplier_id");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsPayable.ReceivingReport", b =>
                {
                    b.HasOne("Accounting_System.Models.AccountsPayable.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_receiving_reports_purchase_orders_po_id");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.CollectionReceipt", b =>
                {
                    b.HasOne("Accounting_System.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_collection_receipts_customers_customer_id");

                    b.HasOne("Accounting_System.Models.AccountsReceivable.SalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("fk_collection_receipts_sales_invoices_sales_invoice_id");

                    b.HasOne("Accounting_System.Models.AccountsReceivable.ServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .HasConstraintName("fk_collection_receipts_service_invoices_service_invoice_id");

                    b.Navigation("Customer");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.CreditMemo", b =>
                {
                    b.HasOne("Accounting_System.Models.AccountsReceivable.SalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("fk_credit_memos_sales_invoices_sales_invoice_id");

                    b.HasOne("Accounting_System.Models.AccountsReceivable.ServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .HasConstraintName("fk_credit_memos_service_invoices_service_invoice_id");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.DebitMemo", b =>
                {
                    b.HasOne("Accounting_System.Models.AccountsReceivable.SalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("fk_debit_memos_sales_invoices_sales_invoice_id");

                    b.HasOne("Accounting_System.Models.AccountsReceivable.ServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .HasConstraintName("fk_debit_memos_service_invoices_service_invoice_id");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.SalesInvoice", b =>
                {
                    b.HasOne("Accounting_System.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_invoices_customers_customer_id");

                    b.HasOne("Accounting_System.Models.AccountsPayable.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_invoices_purchase_orders_po_id");

                    b.HasOne("Accounting_System.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_invoices_products_product_id");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Accounting_System.Models.AccountsReceivable.ServiceInvoice", b =>
                {
                    b.HasOne("Accounting_System.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_invoices_customers_customer_id");

                    b.HasOne("Accounting_System.Models.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_invoices_services_services_id");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Accounting_System.Models.Inventory", b =>
                {
                    b.HasOne("Accounting_System.Models.AccountsPayable.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("POId")
                        .HasConstraintName("fk_inventories_purchase_orders_po_id");

                    b.HasOne("Accounting_System.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventories_products_product_id");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Accounting_System.Models.JournalVoucherHeader", b =>
                {
                    b.HasOne("Accounting_System.Models.AccountsPayable.CheckVoucherHeader", "CheckVoucherHeader")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .HasConstraintName("fk_journal_voucher_headers_check_voucher_headers_cv_id");

                    b.Navigation("CheckVoucherHeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
