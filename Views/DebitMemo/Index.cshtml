@model IEnumerable<DebitMemo>
@using Accounting_System.Models.AccountsReceivable
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Debit Memo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">DEBIT MEMO</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-controller="DebitMemo" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="debitMemoTable">
            <thead class="table-secondary">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.DMNo)</th>
                    <th>@Html.DisplayNameFor(model => model.TransactionDate)</th>
                    <th>Invoice No.</th>
                    <th>@Html.DisplayNameFor(model => model.Source)</th>
                    <th>@Html.DisplayNameFor(model => model.DebitAmount)</th>
                    <th>@Html.DisplayNameFor(model => model.CreatedBy)</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#debitMemoTable').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                ajax: {
                    url: '@Url.Action("GetDebitMemos", "DebitMemo")',
                    type: 'POST',
                    data: function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    error: function (xhr, error, thrown) {
                        console.log(xhr.responseText);
                    }
                },
                columns: [
                    { data: 'dmNo' },
                    {
                        "data": "transactionDate",
                        "name": "transactionDate",
                        "render": function (data, type, row) {
                            // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            if (row.salesInvoiceId) {
                                return row.salesInvoice.siNo
                            }
                            else {
                                return row.serviceInvoice.svNo
                            }
                        }
                    },
                    { data: 'source' },
                    { data: 'debitAmount', "render": $.fn.dataTable.render.number(',', '.', 2) },
                    { data: 'createdBy' },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            var status = row.isPosted && !row.isVoided && !row.isCanceled
                                ? "Posted"
                                : row.isVoided
                                    ? "Voided"
                                    : row.isCanceled
                                        ? "Cancelled"
                                        : "Pending";
                            var statusClass = status == "Posted" ? "bg-info" :
                                status == "Voided" ? "bg-danger" :
                                    status == "Cancelled" ? "bg-warning" : "";
                            return `<span class="badge rounded-pill ${statusClass}">${status}</span>`;
                        }
                    }
                    ,
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            let dropdown = `<div class="dropdown" style="${row.isVoided || row.isCanceled ? 'display:none;' : ''}">`;
                            dropdown += `<button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">Actions</button>`;
                            dropdown += `<ul class="dropdown-menu" aria-labelledby="actionsDropdown">`;
                            if (!row.isPosted && !row.isVoided && !row.isCanceled) {
                                dropdown += `<li><a href="/DebitMemo/Edit?id=${row.id}" class="dropdown-item">Edit</a></li>`;
                                dropdown += `<li><a href="/DebitMemo/Print?id=${row.id}" class="dropdown-item">Preview</a></li>`;
                                dropdown += `<li><a class="dropdown-item" onclick="confirmCancel(${row.id})">Cancel</a></li>`;
                            }
                            if (row.isPosted && !row.isVoided && !row.isCanceled) {
                                dropdown += `<li><a href="/DebitMemo/Print?id=${row.id}" class="dropdown-item">Print</a></li>`;
                                dropdown += `<li><a class="dropdown-item" onclick="confirmVoid(${row.id})">Void</a></li>`;
                            }
                            dropdown += `</ul></div>`;
                            return dropdown;
                        }
                    }
                ],
                order: [[0, 'desc']] // Sort by TransactionDate by default
            });
        });
    </script>
    <script>
        function confirmVoid(id) {
            console.log(id);
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `/DebitMemo/Void?id=${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            console.log(id);
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `/DebitMemo/Cancel?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
}
