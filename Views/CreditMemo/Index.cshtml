@model IEnumerable<CreditMemo>
@using Accounting_System.Models.AccountsReceivable
@{
    ViewData["Title"] = "Credit Memo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    /* Custom styles for professional look */
    .table th {
        font-weight: 600;
        color: #374151;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.025em;
    }

    .table tbody tr {
        transition: all 0.2s;
    }

    .table tbody tr:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.8em;
        font-size: 0.75rem;
    }

    </style>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">CREDIT MEMO</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-controller="CreditMemo" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="creditMemoTable">
            <thead class="table-secondary">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.CreditMemoNo)</th>
                    <th>@Html.DisplayNameFor(model => model.TransactionDate)</th>
                    <th>Invoice No</th>
                    <th>@Html.DisplayNameFor(model => model.Source)</th>
                    <th>@Html.DisplayNameFor(model => model.CreditAmount)</th>
                    <th>@Html.DisplayNameFor(model => model.CreatedBy)</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            $('#creditMemoTable').DataTable({
                processing: true,
                serverSide: true,
                stateSave: true,
                ajax: {
                    url: '@Url.Action("GetCreditMemos", "CreditMemo")',
                    type: 'POST',
                    data: function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    error: function (xhr) {
                        console.log(xhr.responseText);
                    }
                },
                columns: [
                    { data: 'creditMemoNo' },
                    {
                        "data": "transactionDate",
                        "name": "transactionDate",
                        "render": function (data) {
                            // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                            let date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            if (row.salesInvoiceId) {
                                return row.salesInvoice.salesInvoiceNo
                            }
                            else {
                                return row.serviceInvoice.serviceInvoiceNo
                            }
                        }
                    },
                    { data: 'source' },
                    { 
                        data: 'creditAmount',
                        render: function (data) {
                            return formatNumber(data);
                        }
                    },
                    { data: 'createdBy' },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            let status = row.isPosted && !row.isVoided && !row.isCanceled
                                ? "Posted"
                                : row.isVoided
                                    ? "Voided"
                                    : row.isCanceled
                                        ? "Cancelled"
                                        : "Pending";
                            let statusClass = status === "Posted" ? "bg-info" :
                                status === "Voided" ? "bg-danger" :
                                    status === "Cancelled" ? "bg-warning" : "";
                            return `<span class="badge rounded-pill ${statusClass}">${status}</span>`;
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            let dropdown = `<div class="dropdown" style="${row.isVoided || row.isCanceled ? 'display:none;' : ''}">`;
                            dropdown += `<button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">Actions</button>`;
                            dropdown += `<ul class="dropdown-menu" aria-labelledby="actionsDropdown">`;
                            if (!row.isPosted && !row.isVoided && !row.isCanceled) {
                                dropdown += `<li><a href="@Url.Action("Edit", "CreditMemo")/${row.creditMemoId}" class="dropdown-item">Edit</a></li>`;
                                dropdown += `<li><a href="@Url.Action("Print", "CreditMemo")/${row.creditMemoId}" class="dropdown-item">Preview</a></li>`;
                                dropdown += `<li><a class="dropdown-item" onclick="confirmCancel(${row.creditMemoId})">Cancel</a></li>`;
                            }
                            if (row.isPosted && !row.isVoided && !row.isCanceled) {
                                dropdown += `<li><a href="@Url.Action("Print", "CreditMemo")/${row.creditMemoId}" class="dropdown-item">Print</a></li>`;
                                dropdown += `<li><a class="dropdown-item" onclick="confirmVoid(${row.creditMemoId})">Void</a></li>`;
                            }
                            dropdown += `</ul></div>`;
                            return dropdown;
                        }
                    }
                ],
                order: [[0, 'desc']] // Sort by TransactionDate by default
            });
        });
    </script>
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    
                    window.location.href = `@Url.Action("Void", "CreditMemo")/${id}`;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    let cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    let encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    
                    window.location.href = `@Url.Action("Cancel", "CreditMemo")/${id}?cancellationRemarks=${encodedRemarks}`;
                }
            })
        }
    </script>
}
