@using System.ComponentModel.DataAnnotations;
@using Accounting_System.Models.ViewModels;
@model CheckVoucherTradeViewModel

@{
    ViewData["Title"] = "Create Trade";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Create</h1>

<h4>Check Voucher(Trade)</h4>
<hr />

<form asp-action="Trade" method="post" enctype="multipart/form-data">
    <div class="row">
        <div class="col-md-4">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="SupplierId" class="control-label"></label><span class="required">*</span>
                <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 GetPOList supplier" style="width:100%">
                    <option></option>
                </select>
                <span asp-validation-for="SupplierId" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Payee" type="text" class="form-control supplierName" placeholder="" />
                <label asp-for="Payee" class="control-label"></label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="" readonly />
                <label asp-for="SupplierAddress" class="control-label"></label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="" readonly />
                <label asp-for="SupplierTinNo" class="control-label"></label>
            </div>
            <div class="form-group mb-3">
                <label asp-for="POSeries" class="control-label">Suppliers PO No.</label><span class="required">*</span>
                <select asp-for="POSeries" asp-items="@Model.PONo" class="form-select js-multiple GetRRList" multiple="multiple" style="width:100%" required>
                    <option></option>
                </select>
                <span asp-validation-for="POSeries" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <input type="hidden" id="criteriaInput" name="criteria" />
                <label asp-for="RRSeries" class="control-label"></label><span class="required">*</span>
                <select asp-for="RRSeries" asp-items="@Model.RR" class="form-select js-multiple" multiple="multiple" style="width:100%">
                    <option></option>
                </select>
                <span asp-validation-for="RRSeries" class="text-danger"></span>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th class="w-100">RR List</th>
                        <th class="w-20">
                            Amount
                        </th>
                    </tr>
                </thead>
                <tbody class="rrAmountList">
                </tbody>
            </table>
            <div class="form-group mb-3">
                <label asp-for="TransactionDate" class="control-label"></label><span class="required">*</span>
                <input asp-for="TransactionDate" type="Date" class="form-control" />
                <span asp-validation-for="TransactionDate" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="BankId" class="control-label"></label><span class="required">*</span>
                <select asp-for="BankId" asp-items="@Model.BankAccounts" class="form-select js-select2" id="bankAccounts" style="width:100%">
                    <option></option>
                </select>
                <span asp-validation-for="BankId" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="CheckNo" type="text" class="form-control" placeholder="" />
                <span asp-validation-for="CheckNo" class="text-danger"></span>
                <label asp-for="CheckNo" class="control-label">Check No<span class="required">*</span></label>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CheckDate" class="control-label"></label><span class="required">*</span>
                <input asp-for="CheckDate" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" />
                <span asp-validation-for="CheckDate" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Particulars" type="text" class="form-control" placeholder="" />
                <span asp-validation-for="Particulars" class="text-danger"></span>
                <label asp-for="Particulars" class="control-label">Particulars<span class="required">*</span></label>
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Upload File (Optional)</label>
                <input name="file" type="file" class="form-control" />
            </div>
        </div>
        <div class="col-8">
            <div class="row mb-3">
                <table style="border:dotted 1px;">
                    <thead class="m-2">
                        <tr>
                            <th colspan="6" class="text-center py-4">RR AMOUNT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th style="width:19%; padding-left:20px;">RR No's</th>
                            <th class="text-end" style="width:14%;">Gross</th>
                            <th class="text-end" style="width:14%;">Net of Vat</th>
                            <th class="text-end" style="width:14%;">Vat</th>
                            <th class="text-end" style="width:14%;">EWT</th>
                            <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                        </tr>
                    </tbody>
                    <tbody class="rrAmount">
                    </tbody>
                    <tbody>
                        <tr style="border-bottom:double;">
                            <td class="pt-1"></td>
                        </tr>
                        <tr>
                            <td class="text-end fw-bold p-3">Grand Total:</td>
                            <td class="text-end" id="grandTotalRRAmount">0.00</td>
                            <td class="text-end" id="grandTotalNetAmount">0.00</td>
                            <td class="text-end" id="grandTotalVatAmount">0.00</td>
                            <td class="text-end" id="grandTotalEWTAmount">0.00</td>
                            <td class="text-end" id="grandTotalNetOfEWT" style="padding-right:20px;">0.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="row mb-3">
                <table style="border:dotted 1px;">
                    <thead class="m-2">
                        <tr>
                            <th colspan="6" class="text-center py-4">PAYMENT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th style="width:19%; padding-left:20px;">RR No's</th>
                            <th class="text-end" style="width:14%;">Gross</th>
                            <th class="text-end" style="width:14%;">Net of Vat</th>
                            <th class="text-end" style="width:14%;">Vat</th>
                            <th class="text-end" style="width:14%;">EWT</th>
                            <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                        </tr>
                    </tbody>
                    <tbody class="payment">
                    </tbody>
                    <tbody>
                        <tr style="border-bottom:double;">
                            <td class="pt-1"></td>
                        </tr>
                        <tr>
                            <td class="text-end fw-bold p-3">Grand Total:</td>
                            <td class="text-end" id="grandTotalPayment">0.00</td>
                            <td class="text-end" id="grandTotalNetOfVatPayment">0.00</td>
                            <td class="text-end" id="grandTotalVatPayment">0.00</td>
                            <td class="text-end" id="grandTotalEWTPayment">0.00</td>
                            <td class="text-end" id="grandTotalNetOfEWTPayment" style="padding-right:20px;">0.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="row mb-3">
                <table style="border:dotted 1px;">
                    <thead class="m-2">
                        <tr>
                            <th colspan="6" class="text-center py-4">REMAINING BALANCE</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th style="width:19%; padding-left:20px;">RR No's</th>
                            <th class="text-end" style="width:14%;">Gross</th>
                            <th class="text-end" style="width:14%;">Net of Vat</th>
                            <th class="text-end" style="width:14%;">Vat</th>
                            <th class="text-end" style="width:14%;">EWT</th>
                            <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                        </tr>
                    </tbody>
                    <tbody class="balance">
                    </tbody>
                    <tbody>
                        <tr style="border-bottom:double;">
                            <td class="pt-1"></td>
                        </tr>
                        <tr>
                            <td class="text-end fw-bold p-3">Grand Total:</td>
                            <td class="text-end" id="grandTotal">0.00</td>
                            <td class="text-end" id="grandTotalNetOfVat">0.00</td>
                            <td class="text-end" id="grandTotalVat">0.00</td>
                            <td class="text-end" id="grandTotalEWT">0.00</td>
                            <td class="text-end" id="grandTotalRRAmountNetOfEWT" style="padding-right:20px;">0.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <br />
        <div class="form-group">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#AddAccEntry">
                Add Entry
            </button>
            <table class="table">
                <thead>
                    <tr>
                        <th class="w-50">Account No.</th>
                        <th class="w-25">
                            Debit
                        </th>
                        <th class="w-25">
                            Credit
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="accountingEntriesBody">
                    <tr>
                        <input type="hidden" name="AccountNumber" value="2010101" />
                        <td><input type='text' name="AccountTitle" value='AP-Trade Payable' class="w-100" style='border:none' readonly /></td>
                        <td><input type='text' name="Debit" value='0.00' class="w-100 totalNetOfEWT" style='border:none' readonly /></td>
                        <td><input type='text' name="Credit" value='0.00' class="w-100" style='border:none' readonly /></td>
                        <td></td>
                    </tr>
                    <tr class="EWTDebit">
                        <input type="hidden" name="AccountNumber" value="2010302" />
                        <td><input type='text' name="AccountTitle" value='Expanded Witholding Tax 1%' class="w-100" style='border:none' readonly /></td>
                        <td><input type='text' name="Debit" value='0.00' class="w-100 totalEWT" style='border:none' readonly /></td>
                        <td><input type='text' name="Credit" value='0.00' class="w-100" style='border:none' readonly /></td>
                        <td></td>
                    </tr>
                    <tr class="EWTCredit">
                        <input type="hidden" name="AccountNumber" value="2010302" />
                        <td><input type='text' name="AccountTitle" value='Expanded Witholding Tax 1%' class="w-100" style='border:none' readonly /></td>
                        <td><input type='text' name="Debit" value='0.00' class="w-100" style='border:none' readonly /></td>
                        <td><input type='text' name="Credit" value='0.00' class="w-100 totalEWT" style='border:none' readonly /></td>
                        <td></td>
                    </tr>

                    <tr>
                        <input type="hidden" name="AccountNumber" class="accountNo" />
                        <td><input type='text' name="AccountTitle" value="Cash in Bank" class="w-100 accountTitle" style='border:none' readonly /></td>
                        <td><input type='text' name="Debit" value='0.00' class="w-100" style='border:none' readonly /></td>
                        <td><input type='text' name="Credit" value="0.00" class="w-100 totalNetOfEWT" style='border:none' readonly /></td>
                        <td></td>
                    </tr>
                </tbody>
                <tbody>
                    <tr>
                        <td class="text-end">TOTAL:</td>
                        <td class="totalDebit">0.00</td>
                        <td class="totalCredit">0.00</td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <br />
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-primary" onclick="validateDebitAndCredit(event)" />
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </div>
</form>


<!-- Modal -->
<div class="modal fade" id="AddAccEntry" data-bs-backdrop="static" tabindex="-1" aria-labelledby="AddAccEntryLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="AddAccEntryLabel">Add Accounting Entry</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label class="control-label">Account No.</label>
                        <select asp-items="@Model.COA" class="form-select" style="width: 100%" id="AccountNo">
                            <option></option>
                        </select>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Debit</label>
                        <input id="Debit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Credit</label>
                        <input id="Credit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                        <span class="text-danger"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveAccountingEntry(event)">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#AccountNo').select2({
            dropdownParent: $('#AddAccEntry')
        });
    </script>
    <script>
        function saveAccountingEntry(event) {
            // Get the values from the modal inputs
            var accountNumber = $("#AccountNo").val();
            var accountNumberText = $("#AccountNo option:selected").text().replace(/^\S+\s/, '');
            var debit = parseFloat($("#Debit").val().replace(/,/g, '')) || 0.00;
            var credit = parseFloat($("#Credit").val().replace(/,/g, '')) || 0.00;

            if (debit === 0 && credit === 0) {
                event.preventDefault();
                alert('Please input amount');
                return;
            } else if (accountNumberText === "") {
                event.preventDefault();
                alert('Please select Account No.!');
                return;
            }

            // Format debit and credit values with commas and two decimal places
            var formattedDebit = debit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            var formattedCredit = credit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Create a new row with the text only and a hidden input for the value
            var newRow = `<tr>
                                                                                    <td>
                                                                                        <input type='hidden' name='AccountNumber' value='${accountNumber}'/>
                                                                                        <input type='text' name='AccountTitle' value='${accountNumberText}' style='border:none' class='w-100' readonly />
                                                                                    </td>
                                                                                    <td><input name='Debit' id='debit_${accountNumber}' value='${formattedDebit}' style='border:none' class='w-100' readonly /></td>
                                                                                    <td><input name='Credit' id='credit_${accountNumber}' value='${formattedCredit}' style='border:none' class='w-100' readonly /></td>
                                                                                    <td><button type='button' class='btn btn-danger btn-sm' onclick='removeRow(this)'>Remove</button></td>
                                                                             </tr>`;

            // Append the new row to the table body
            $("#accountingEntriesBody").append(newRow);

            // Close the modal
            $("#AddAccEntry").modal("hide");

            // Clear the modal inputs
            $("#AccountNo").val(""); // Reset the select to its default state
            $("#AccountNo").trigger("change"); // Trigger change event for the select
            $("#Debit").val("0.00");
            $("#Credit").val("0.00");

            updateTotalDebitAndCredit();
        }

        function updateTotalDebitAndCredit() {
            var totalDebit = 0;
            var totalCredit = 0;

            // Loop through each row in the table body and sum up the debit values
            $("#accountingEntriesBody tr, .defaultEntry tr").each(function () {
                var debitInput = $(this).find("td:eq(1) input").val();
                var creditInput = $(this).find("td:eq(2) input").val();
                // Ensure debitInput and creditInput are strings before using replace
                debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                creditInput = creditInput ? String(creditInput) : "";

                var debit = parseFloat(debitInput.replace(/,/g, '')) || 0.00;
                var credit = parseFloat(creditInput.replace(/,/g, '')) || 0.00;

                totalDebit += debit;
                totalCredit += credit;
            });

            // Display the total debit value
            $(".totalDebit").text(totalDebit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $(".totalCredit").text(totalCredit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

        // Function to remove the corresponding row
        function removeRow(button) {
            // Get the reference to the button's parent row and remove it
            $(button).closest("tr").remove();
            updateTotalDebitAndCredit();
        }
    </script>
    <script>
        $(function () {
            $(".supplier").each(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });
            $(".supplier").change(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });

            function computeDefaultEntry(suppId) {
                if (suppId !== "") {
                    // Make an AJAX request to get the TaxType based on the selected SupplierId
                    $.ajax({
                        url: "/CheckVoucher/GetSI",
                        method: "GET",
                        data: { supplierId: suppId },
                        success: function (data) {
                            if (data.taxType === "Withholding Tax") {
                                $(".EWTDebit, .EWTCredit").show(); // Show the EWT table rows
                            } else {
                                $(".EWTDebit, .EWTCredit").hide(); // Hide the EWT table rows
                            }
                            if (data.address !== null || data.tinNo !== null) {
                                $("#SupplierAddress").val(data.address);
                                $("#SupplierTinNo").val(data.tinNo);
                                $(".supplierName").val(data.name);
                            } else {
                                $("#SupplierAddress").val("");
                                $("#SupplierTinNo").val("");
                                $(".supplierName").val("");
                            }
                            $(document).ready(function () {
                                $("#RRSeries").change(function () {
                                    updateAmounts();
                                });

                                $(document).on('input', '.inputAmount', function () {
                                    updateAmounts();
                                });

                                function updateAmounts() {
                                    var amountInputs = document.querySelectorAll('.inputAmount');
                                    var totalNetOfEWT = 0;
                                    var totalEWT = 0;
                                    amountInputs.forEach(function (input) {
                                        if (data.taxType === "Withholding Tax") {
                                            var rrAmount = parseFloat(input.value);
                                            var netOfVat = rrAmount / 1.12;
                                            var vat = netOfVat * 0.12;
                                            var ewt = netOfVat * 0.01;
                                            var rrAmountNetOfEWT = rrAmount - ewt;
                                            totalNetOfEWT += rrAmountNetOfEWT;
                                            totalEWT += ewt;
                                        } else {
                                            var rrAmount = parseFloat(input.value);
                                            totalNetOfEWT += rrAmount;
                                        }
                                    });
                                    $(".totalNetOfEWT").val(totalNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    $(".totalEWT").val(totalEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    updateTotalDebitAndCredit();
                                }

                                $("#RRSeries").trigger("change");
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching TaxType:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $(".EWTDebit, .EWTCredit").hide();
                    $("#SupplierAddress").val("");
                    $("#SupplierTinNo").val("");
                    $(".supplierName").val("");
                }
            }
        });
    </script>
    <script>
        $(function () {
            $(".GetPOList").change(function () {
                var suppId = $(this).val();
                if (suppId !== "") {
                    // Make an AJAX request to get the POs based on the selected SupplierId
                    $.ajax({
                        url: "/CheckVoucher/GetPOs",
                        method: "GET",
                        data: { supplierId: suppId }, // Corrected parameter name
                        success: function (data) {
                            if (data) {
                                // Clear existing options
                                $("#POSeries").empty();
                                // Add new options based on the fetched data
                                $.each(data, function (index, po) {
                                    if (po && po.poNumber) { // Adjust property name to poNumber
                                        $('#POSeries').append('<option value="' + po.poNumber + '">' + po.poNumber + '</option>'); // Adjust property names
                                    } else {
                                        console.error("Invalid PO object:", po);
                                    }
                                });
                            } else {
                                // Clear the fields if no POs are found
                                $("#POSeries").empty();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching POs:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $("#POSeries").empty();
                }
            });
        });
    </script>
    <script>
        $(function criteria() {
            var criteria; // Variable to store the selected criteria

            $(".GetRRList").change(function () {
                var poNumber = $(this).val(); // Get all selected POIds
                if (poNumber && poNumber.length > 0) {

                    if (!criteria) {
                        Swal.fire({
                            title: 'Choose Criteria',
                            text: 'Do you want to display records based on Due Date or Transaction Date?',
                            input: 'select',
                            inputOptions: {
                                'Due Date': 'Due Date',
                                'Transaction Date': 'Transaction Date'
                            },
                            inputPlaceholder: 'Select display criteria',
                            allowOutsideClick: false, // Prevent closing on outside click
                            allowEscapeKey: false,  // Prevent closing with Esc key
                            showCancelButton: true,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                criteria = result.value; // Store the selected criteria
                                if (criteria) {
                                    displayRecords(poNumber, criteria); // Pass criteria and PO numbers to displayRecords function
                                } else {
                                    console.error('Invalid display criteria');
                                }
                            } else {
                                criteria();
                                console.log('User canceled');
                            }
                        });
                    } else {
                        if (poNumber && poNumber.length > 0) {
                            displayRecords(poNumber, criteria); // Pass PO number and criteria to displayRecords function
                        } else {
                            console.error('No PO number selected');
                        }
                    }
                } else {
                    // Clear the fields if no POs are selected
                    $("#RRSeries").empty();
                }
            });
        });

        function displayRecords(poNumber, criteria) {
            // Make an AJAX request to get the RRs based on the selected POIds and display criteria
            $.ajax({
                url: "/CheckVoucher/GetRRs",
                method: "GET",
                data: { poNumber: poNumber, criteria: criteria }, // Pass PO numbers to controller
                traditional: true, // Ensure jQuery sends the array properly
                success: function (data) {
                    if (data) {
                        // Clear existing options
                        $("#RRSeries").empty();
                        // Add new options based on the fetched data
                        $.each(data, function (index, rr) {
                            if (rr && rr.rrNumber) { // Adjust property name to RRNumber
                                $('#RRSeries').append('<option value="' + rr.rrNumber + '">' + rr.rrNumber + '</option>'); // Adjust property names
                            } else {
                                console.error("Invalid RR object:", rr);
                            }
                        });
                    } else {
                        // Clear the fields if no RRs are found
                        $("#RRSeries").empty();
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching RRs:', error);
                }
            });
        }
    </script>
    <script>
        $(document).ready(function () {
            $("#RRSeries").change(function () {
                var rrSelect = $("#RRSeries").val();

                // Clear the table before adding new rows
                $(".rrAmountList").empty();
                $(".rrAmount").empty();
                $(".payment").empty();
                $(".balance").empty();

                // Loop through each selected option and add it to the table
                rrSelect.forEach(function (rrNo) {
                    var rrSelectText = $("#RRSeries option[value='" + rrNo + "']").text();
                    var newRow = `<tr>
                                                                                <td>
                                                                                    <input type='hidden' name='rrNo' value='${rrNo}' />
                                                                                    <input type='text' name='rrNoText' value='${rrSelectText}' style='border:none' readonly />
                                                                                </td>
                                                                                <td><input type='text' name='Amount' class='inputAmount money' id='paymentAmount_${rrNo}'/></td>
                                                                            </tr>`;
                    var rrAmount = `<tr id='row_${rrNo}'>
                                                                                    <td style='padding-left:20px;'>
                                                                                        <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                                                        <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                                                    </td>
                                                                                    <td class="text-end" id='amount_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='netAmount_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='vatAmount_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='ewtAmount_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='rrAmountNetOfEWT_${rrNo}' style="padding-right:20px;">0.00</td>
                                                                                </tr>`;
                    var payment = `<tr id='row_${rrNo}'>
                                                                                    <td style='padding-left:20px;'>
                                                                                        <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                                                        <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                                                    </td>
                                                                                    <td class="text-end" id='payment_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='netOfVatPayment_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='vatPayment_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='ewtPayment_${rrNo}'>0.00</td>
                                                                                    <td class="text-end" id='rrAmountNetOfEWTPayment_${rrNo}' style="padding-right:20px;">0.00</td>
                                                                                </tr>`;
                    var balance = `<tr id='row_${rrNo}'>
                                                                                <td style='padding-left:20px;'>
                                                                                    <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                                                    <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                                                </td>
                                                                                <td class="text-end" id='balance_${rrNo}'>0.00</td>
                                                                                <td class="text-end" id='NetOfVat_${rrNo}'>0.00</td>
                                                                                <td class="text-end" id='Vat_${rrNo}'>0.00</td>
                                                                                <td class="text-end" id='EWT_${rrNo}'>0.00</td>
                                                                                <td class="text-end" id='RRAmountNetOfEWT_${rrNo}' style="padding-right:20px;">0.00</td>
                                                                            </tr>`;
                    $(".rrAmountList").append(newRow);
                    $(".rrAmount").append(rrAmount);
                    $(".payment").append(payment);
                    $(".balance").append(balance);

                    $("#paymentAmount_" + rrNo).on('input', function () {
                        var inputValue = $(this).val();
                        var netOfVat = inputValue / 1.12;
                        var vat = netOfVat * 0.12;
                        var ewt = netOfVat * 0.01;
                        var rrAmountNetOfEWT = inputValue - ewt;
                        var numericValue = parseFloat(inputValue.replace(/,/g, ''));
                        var formattedValue = numericValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        $("#payment_" + rrNo).text(formattedValue);
                        $("#netOfVatPayment_" + rrNo).text(netOfVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#vatPayment_" + rrNo).text(vat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#ewtPayment_" + rrNo).text(ewt.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#rrAmountNetOfEWTPayment_" + rrNo).text(rrAmountNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

                        //Recalculate grand Total computted payment
                        calculateGrandTotalPayment();
                    });

                    if (rrNo !== "") {
                        // Make an AJAX request to get the balance based on the selected RRNo
                        $.ajax({
                            url: "/CheckVoucher/RRBalance",
                            method: "GET",
                            data: { rrNo: rrNo },
                            success: function (data) {
                                if (data.balance !== null) {
                                    $("#paymentAmount_" + rrNo).on('input', function () {
                                        var inputValue = $(this).val();
                                        var balance = data.amount - data.amountPaid - inputValue;

                                        var netOfVat = balance / 1.12;
                                        var vat = netOfVat * 0.12;
                                        var ewt = netOfVat * 0.01;
                                        var rrAmountNetOfEWT = balance - ewt;

                                        $("#balance_" + rrNo).text(balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#NetOfVat_" + rrNo).text(netOfVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#Vat_" + rrNo).text(vat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#EWT_" + rrNo).text(ewt.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#RRAmountNetOfEWT_" + rrNo).text(rrAmountNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

                                        //Recalculate grand Total computted
                                        calculateGrandTotal();
                                    });
                                }
                                if (data !== null) {
                                    //compute / show existing RR
                                    var gross = data.amount - data.amountPaid;
                                    $("#amount_" + rrNo).text(gross.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    var netAmount = gross / 1.12;
                                    $("#netAmount_" + rrNo).text(netAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    var vatAmount = netAmount * 0.12;
                                    $("#vatAmount_" + rrNo).text(vatAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    var ewtAmount = netAmount * 0.01;
                                    $("#ewtAmount_" + rrNo).text(ewtAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                    var rrAmountNetOfEWT_ = gross - ewtAmount;
                                    $("#rrAmountNetOfEWT_" + rrNo).text(rrAmountNetOfEWT_.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

                                    // Recalculate grand total of existing RR
                                    calculateGrandTotalRRAmount()
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Error fetching balance:', error);
                            }
                        });
                    }
                });
                calculateGrandTotalPayment()
                calculateGrandTotal()
                calculateGrandTotalRRAmount()
            });
        });

        //Compute Grand Total Balance
        function calculateGrandTotal() {
            var grandTotal = 0;
            var grandTotalNetOfVat = 0;
            var grandTotalVat = 0;
            var grandTotalEWT = 0;
            var grandTotalRRAmountNetOfEWT = 0;

            $(".balance tr").each(function () {
                var balance = $(this).find("[id^='balance_']").text();
                var totalBalance = parseFloat(balance.replace(/,/g, '')) || 0;
                grandTotal += totalBalance;

                var netOfVat = $(this).find("[id^='NetOfVat_']").text();
                var totalNetOfVat = parseFloat(netOfVat.replace(/,/g, '')) || 0;
                grandTotalNetOfVat += totalNetOfVat;

                var vat = $(this).find("[id^='Vat_']").text();
                var totalVat = parseFloat(vat.replace(/,/g, '')) || 0;
                grandTotalVat += totalVat;

                var ewt = $(this).find("[id^='EWT_']").text();
                var totalEwt = parseFloat(ewt.replace(/,/g, '')) || 0;
                grandTotalEWT += totalEwt;

                var rrAmountNetOfEWT = $(this).find("[id^='RRAmountNetOfEWT_']").text();
                var totalNetOfEWT = parseFloat(rrAmountNetOfEWT.replace(/,/g, '')) || 0;
                grandTotalRRAmountNetOfEWT += totalNetOfEWT;
            });

            // Update grand total in the table
            $("#grandTotal").text(grandTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfVat").text(grandTotalNetOfVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalVat").text(grandTotalVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalEWT").text(grandTotalEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalRRAmountNetOfEWT").text(grandTotalRRAmountNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

        function calculateGrandTotalRRAmount() {
            var grandTotalRRAmount = 0;
            var grandTotalNetAmount = 0;
            var grandTotalVatAmount = 0;
            var grandTotalEWTAmount = 0;
            var grandTotalNetOfEWT = 0;

            $(".rrAmount tr").each(function () {
                var amount = $(this).find("[id^='amount_']").text();
                var totalAmount = parseFloat(amount.replace(/,/g, '')) || 0;
                grandTotalRRAmount += totalAmount;

                var netAmount = $(this).find("[id^='netAmount_']").text();
                var totalNetAmount = parseFloat(netAmount.replace(/,/g, '')) || 0;
                grandTotalNetAmount += totalNetAmount;

                var vatAmount = $(this).find("[id^='vatAmount_']").text();
                var totalVatAmount = parseFloat(vatAmount.replace(/,/g, '')) || 0;
                grandTotalVatAmount += totalVatAmount;

                var ewtAmount = $(this).find("[id^='ewtAmount_']").text();
                var totalEwtAmount = parseFloat(ewtAmount.replace(/,/g, '')) || 0;
                grandTotalEWTAmount += totalEwtAmount;

                var rrAmountNetOfEWT = $(this).find("[id^='rrAmountNetOfEWT_']").text();
                var totalAmountNetOfEWT = parseFloat(rrAmountNetOfEWT.replace(/,/g, '')) || 0;
                grandTotalNetOfEWT += totalAmountNetOfEWT;
            });

            // Update grand total in the table
            $("#grandTotalRRAmount").text(grandTotalRRAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetAmount").text(grandTotalNetAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalVatAmount").text(grandTotalVatAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalEWTAmount").text(grandTotalEWTAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfEWT").text(grandTotalNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

        function calculateGrandTotalPayment() {
            var grandTotalPayment = 0;
            var grandTotalNetOfVatPayment = 0;
            var grandTotalVatPayment = 0;
            var grandTotalEWTPayment = 0;
            var grandTotalNetOfEWTPayment = 0;

            $(".payment tr").each(function () {
                var paymentInput = $(this).find("[id^='payment_']").text();
                var payment = parseFloat(paymentInput.replace(/,/g, '')) || 0;
                grandTotalPayment += payment;

                var netOfVatPaymentInput = $(this).find("[id^='netOfVatPayment_']").text();
                var netOfVatPayment = parseFloat(netOfVatPaymentInput.replace(/,/g, '')) || 0;
                grandTotalNetOfVatPayment += netOfVatPayment;

                var vatPaymentInput = $(this).find("[id^='vatPayment_']").text();
                var vatPayment = parseFloat(vatPaymentInput.replace(/,/g, '')) || 0;
                grandTotalVatPayment += vatPayment;

                var ewtPaymentInput = $(this).find("[id^='ewtPayment_']").text();
                var ewtPayment = parseFloat(ewtPaymentInput.replace(/,/g, '')) || 0;
                grandTotalEWTPayment += ewtPayment;

                var rrAmountNetOfEWTPaymentInput = $(this).find("[id^='rrAmountNetOfEWTPayment_']").text();
                var rrAmountNetOfEWTPayment = parseFloat(rrAmountNetOfEWTPaymentInput.replace(/,/g, '')) || 0;
                grandTotalNetOfEWTPayment += rrAmountNetOfEWTPayment;
            });

            // Update grand total in the table
            $("#grandTotalPayment").text(grandTotalPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfVatPayment").text(grandTotalNetOfVatPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalVatPayment").text(grandTotalVatPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalEWTPayment").text(grandTotalEWTPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfEWTPayment").text(grandTotalNetOfEWTPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

    </script>
    <script>
        $(document).ready(function () {
            function fetchBankAccount() {
                var bankId = $('#bankAccounts').val();
                if (bankId) {
                    $.ajax({
                        url: "/CheckVoucher/GetBankAccount",
                        method: "GET",
                        data: { bankId: bankId },
                        success: function (data) {
                            $(".accountTitle").val("Cash in Bank" + " - " + data.accountNo + " " + data.accountName);
                            $(".accountNo").val(data.accountNoCOA);
                        },
                        error: function (error) {
                            console.error('Error fetching bank account:', error)
                        }
                    });
                }
            }

            $('#bankAccounts').change(fetchBankAccount);

            // Trigger the change event on page load if a bank is already selected
            fetchBankAccount();
        });
    </script>
    <script>
        function validateDebitAndCredit(event) {
            var debit = parseFloat($(".totalDebit").text().replace(/,/g, '')) || 0.00;
            var credit = parseFloat($(".totalCredit").text().replace(/,/g, '')) || 0.00;
            if (debit !== credit) {
                event.preventDefault();
                alert('Total Debit and Credit do not match.');
                return;
            }
        }
    </script>
    <script>
        $(document).ready(function () {
            var accountNumbers = @Html.Raw(Json.Serialize(Model.AccountNumber));
            var accountTitles = @Html.Raw(Json.Serialize(Model.AccountTitle));
            var debits = @Html.Raw(Json.Serialize(Model.Debit));
            var credits = @Html.Raw(Json.Serialize(Model.Credit));



            for (var i = 0; i < accountNumbers.length; i++) {
                var debitClass = ''; // Initialize the debit class
                var creditClass = ''; // Initialize the credit class
                var trClass = ''; // Initialize the credit class
                var accountTitleClass = ''; // Initialize the credit class

                // Determine class for debits based on conditions
                if (accountTitles[i] === 'AP-Trade Payable') {
                    debitClass = 'totalNetOfEWT';
                }
                if (accountTitles[i] === 'Expanded Witholding Tax 1%') {
                    if (debits[i] != 0) {
                        debitClass = 'totalEWT';
                        trClass = 'EWTDebit';
                    } else if (credits[i] != 0) {
                        creditClass = 'totalEWT';
                        trClass = 'EWTCredit';
                    }

                }
                if (accountTitles[i].includes('Cash in Bank')) {
                    creditClass = 'totalNetOfEWT';
                    accountTitleClass = 'accountTitle';
                }

                // Construct the row HTML with the determined row class
                var row = '<tr class="' + trClass + '">' +
                    '<input type="hidden" name="AccountNumber" value="' + accountNumbers[i] + '" />' +
                    '<td><input type="text" name="AccountTitle" value="' + accountTitles[i] + '" class="w-100 ' + accountTitleClass + ' " style="border:none" readonly /></td>' +
                    '<td><input type="text" name="Debit" value="' + debits[i].toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + '" class="' + debitClass + '" style="border:none" readonly /></td>' +
                    '<td><input type="text" name="Credit" value="' + credits[i].toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + '" class="' + creditClass + '" style="border:none" readonly /></td>' +
                    (i < 4 ? '<td></td>' : '<td><button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">Remove</button></td>') +
                    '</tr>';

                $('.defaultEntry').append(row);
            }
            updateTotalDebitAndCredit();

        });
    </script>
    <script>
        setTransactionDate();
    </script>
}
