@using System.ComponentModel.DataAnnotations;
@using Accounting_System.Models.ViewModels;
@model CheckVoucherNonTradeInvoicingViewModel

@{
    ViewData["Title"] = "CREATE NON TRADE INVOICING";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">@ViewData["Title"]</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data">
            <div class="row">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group mb-3">
                    <label asp-for="TransactionDate" class="control-label"></label><span class="required">*</span>
                    <input asp-for="TransactionDate" type="Date" class="form-control" />
                    <span asp-validation-for="TransactionDate" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Supplier<span class="required">*</span></label>
                    <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 supplier" style="width:100%" required>
                        <option></option>
                    </select>
                    <span asp-validation-for="SupplierId" class="text-danger"></span>
                </div>
                <input asp-for="SupplierName" type="hidden" />
                <div class="form-floating mb-3">
                    <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierAddress" class="control-label"></label>
                    <span asp-validation-for="SupplierAddress" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierTinNo" class="control-label"></label>
                    <span asp-validation-for="SupplierTinNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="PoNo" class="form-control" placeholder="Input si no" style="height: 100px"></textarea>
                    <label asp-for="PoNo" class="control-label">PO No</label>
                    <span asp-validation-for="PoNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="SiNo" class="form-control" placeholder="Input po no" style="height: 100px"></textarea>
                    <label asp-for="SiNo" class="control-label">SI No</label>
                    <span asp-validation-for="SiNo" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Total" class="control-label"></label><span class="required">*</span>
                    <input asp-for="Total" class="form-control money inputAmount" value="" placeholder="0.00" />
                    <span asp-validation-for="Total" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Upload File (Optional)</label>
                    <input name="file" type="file" class="form-control" />
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="Particulars" class="form-control" placeholder="Leave a remarks here" style="height: 100px"></textarea>
                    <label asp-for="Particulars" class="control-label">Particulars<span class="required">*</span></label>
                    <span asp-validation-for="Particulars" class="text-danger"></span>
                </div>
                <input type="hidden" id="StartDate" name="StartDate" />
                <input type="hidden" id="NumberOfYears" name="NumberOfYears" value="0" />
                <div class="form-group">
                    <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#AddAccEntry">
                        Add Entry
                    </button>
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="w-50">Account No.</th>
                                <th class="w-25">
                                    Debit
                                </th>
                                <th class="w-25">
                                    Credit
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="accountingEntriesBody">
                            <tr>
                                <td>
                                    <input type="hidden" name="AccountTitle" class="defaultExpenseTitle" />
                                    <select asp-for="AccountNumber" asp-items="@Model.DefaultExpenses" class="form-select js-select-defaultExpense" style="width: 100%">
                                        <option></option>
                                    </select>
                                </td>
                                <td><input name="Debit" value='0.00' class="w-100 netOfVat" style='border:none' readonly /></td>
                                <td><input name="Credit" value='0.00' class="w-100" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr class="vatInputDebit">
                                <input type="hidden" name="AccountNumber" value="1010602" />
                                <td><input type='text' name="AccountTitle" value='Vat Input' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Debit" value='0.00' class="w-100 vatInput" style='border:none' readonly /></td>
                                <td><input type='text' name="Credit" value='0.00' class="w-100" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr class="EWTCredit">
                                <input type="hidden" name="AccountNumber" class="withholdingTaxNumber" />
                                <td><input type='text' name="AccountTitle" class="w-100 withholdingTaxTitle" style='border:none' readonly /></td>
                                <td><input type='text' name="Debit" value='0.00' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Credit" value='0.00' class="w-100 totalEWT" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>
                                    <input type="hidden" name="AccountNumber" value="2010102" />
                                    <input name='AccountTitle' value='AP-Non Trade Payable' class="w-100" style='border:none' readonly />
                                </td>
                                <td><input name="Debit" value='0.00' class="w-100" style='border:none' readonly /></td>
                                <td><input name="Credit" value='0.00' class="w-100 totalNetOfEWT" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>
                                <td class="text-end">TOTAL:</td>
                                <td class="totalDebit">0.00</td>
                                <td class="totalCredit">0.00</td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <br />
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control" onclick="validateDebitAndCredit(event)">Create</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-controller="CheckVoucher" asp-action="Index" class="btn btn-outline-primary border  form-control ">Back to List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="AddAccEntry" data-bs-backdrop="static" tabindex="-1" aria-labelledby="AddAccEntryLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="AddAccEntryLabel">Add Accounting Entry</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label class="control-label">Account No.</label>
                        <select id="AccountNo" asp-items="@Model.ChartOfAccounts" class="form-select" style="width: 100%">
                            <option></option>
                        </select>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Debit</label>
                        <input id="Debit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Credit</label>
                        <input id="Credit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                        <span class="text-danger"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="calculateButton" onclick="saveAccountingEntry()">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#AccountNo').select2({
            dropdownParent: $('#AddAccEntry')
        });
        $(".supplier").each(function () {
            var supplierId = $(this).val();
            computeDefaultEntry(supplierId)
        });
        $(".supplier").change(function () {
            var supplierId = $(this).val();
            computeDefaultEntry(supplierId)
            getDefaultExpense(supplierId)
        });
        function computeDefaultEntry(supplierId) {

            if (supplierId !== "") {
                $.ajax({
                    url: "/CheckVoucher/GetSupplierDetails", // Replace with the actual controller and action names
                    method: "GET",
                    data: { supplierId: supplierId },
                    success: function (data) {
                        if (data.taxType === "Withholding Tax") {
                            $(".EWTCredit").show(); // Show the EWT table rows
                        } else {
                            $(".EWTCredit").hide(); // Hide the EWT table rows
                        }
                        if (data.vatType === "Vatable") {
                            $(".vatInputDebit").show(); // Show the EWT table rows
                        } else {
                            $(".vatInputDebit").hide(); // Hide the EWT table rows
                        }
                        if (data) {
                            $("#SupplierName").val(data.supplierName);
                            $("#SupplierAddress").val(data.supplierAddress);
                            $("#SupplierTinNo").val(data.supplierTinNo);
                            $(".withholdingTaxNumber").val(data.withholdingTax !== null ? data.withholdingTax.split(' ')[0] : null);
                            $(".withholdingTaxTitle").val(data.withholdingTax !== null ? data.withholdingTax.replace(/^\s*\S+\s*/, '').trim() : null);
                        } else {
                            $("#SupplierName").val("");
                            $("#SupplierAddress").val("");
                            $("#SupplierTinNo").val("");
                            $(".withholdingTaxNumber").val("");
                            $(".withholdingTaxtitle").val("");
                        }
                        $(document).ready(function () {
                            $(".supplier").change(function () {
                                var amountInputs = document.querySelectorAll('.inputAmount');
                                updateAmounts(amountInputs);
                            });

                            $(document).on('input', '.inputAmount', function () {
                                var amountInputs = document.querySelectorAll('.inputAmount');
                                updateAmounts(amountInputs);
                            });

                            function updateAmounts(amountInputs) {
                                var totalNetOfEWT = 0;
                                var totalEWT = 0;
                                var vatInput = 0;
                                var netOfVatAmount = 0;
                                amountInputs.forEach(function (input) {
                                    var rawValue = input.value;
                                    var totalValue = parseNumber(rawValue);

                                    // Perform calculations
                                    var netOfVat = totalValue / 1.12;
                                    var roundedNetOfVat = Math.round(netOfVat * 10000) / 10000; // Rounding to 2 decimal places

                                    var vat = roundedNetOfVat * 0.12;
                                    var roundedVat = Math.round(vat * 100) / 100; // Rounding to 2 decimal places

                                    var ewt = roundedNetOfVat * (data.category === "Trade" ? 0.01 : data.taxPercent / 100);
                                    var roundedEwt = Math.round(ewt * 10000) / 10000; // Rounding to 2 decimal places

                                    var rrAmountNetOfEWT = totalValue - roundedEwt;
                                    var roundedRrAmountNetOfEWT = Math.round(rrAmountNetOfEWT * 10000) / 10000; // Rounding to 2 decimal places

                                    if (data.vatType === "Vatable" && data.taxType === "Withholding Tax") {
                                        totalNetOfEWT += roundedRrAmountNetOfEWT;
                                        totalEWT += roundedEwt;
                                        vatInput = roundedVat;
                                        netOfVatAmount = roundedNetOfVat;
                                    } else if (data.vatType === "Vatable") {
                                        totalNetOfEWT += roundedRrAmountNetOfEWT;
                                        vatInput = roundedVat;
                                        netOfVatAmount = roundedNetOfVat;
                                    } else if (data.taxType === "Withholding Tax") {
                                        totalNetOfEWT += roundedRrAmountNetOfEWT;
                                        totalEWT += roundedEwt;
                                        netOfVatAmount = roundedNetOfVat;
                                    } else {
                                        totalNetOfEWT += totalValue;
                                        netOfVatAmount += totalValue;
                                    }
                                });
                                $(".vatInput").val(formatNumber(vatInput));
                                $(".netOfVat").val(formatNumber(netOfVatAmount));
                                $(".totalNetOfEWT").val(formatNumber(totalNetOfEWT));
                                $(".totalEWT").val(formatNumber(totalEWT));
                                updateTotalDebitAndCredit();
                            }

                            var initialAmountInputs = document.querySelectorAll('.inputAmount');
                            updateAmounts(initialAmountInputs);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching:', error);
                    }
                });
            } else {
                $("#SupplierName").val("");
                $("#SupplierAddress").val("");
                $("#SupplierTinNo").val("");
                $(".withholdingTaxNumber").val("");
                $(".withholdingTaxtitle").val("");
            }
        };
    </script>
    <script>
        function getDefaultExpense(supplierId) {
            // Make an AJAX request to get the RRs based on the selected POIds and display criteria
            $.ajax({
                url: "/CheckVoucher/GetDefaultExpense",
                method: "GET",
                data: { supplierId: supplierId }, // Pass PO numbers to controller
                traditional: true, // Ensure jQuery sends the array properly
                success: function (data) {
                    if (data) {
                        // Clear existing options
                        $("#AccountNumber").empty();
                        // Add new options based on the fetched data
                        $.each(data, function (index, defaultExpense) {
                            let selected = defaultExpense.isSelected ? 'selected' : '';
                            $('#AccountNumber').append('<option value="' + defaultExpense.accountNumber + '" ' + selected + '>' + defaultExpense.accountTitle + '</option>');
                            var accountNumberText = $("#AccountNumber option:selected").text();
                            $('.defaultExpenseTitle').val(accountNumberText);
                        });
                        // Handle dropdown change event
                        $('#AccountNumber').on('change', function () {
                            let selectedValue = $(this).val();
                            var accountNumberText = $("#AccountNumber option:selected").text();
                            $('.defaultExpenseTitle').val(accountNumberText);
                        });
                    } else {
                        // Clear the fields if no RRs are found
                        $("#AccountNumber").empty();
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching:', error);
                }
            });
        }
    </script>
    <script>
        function saveAccountingEntry() {
            // Get the values from the modal inputs
            var accountNumber = $("#AccountNo").val();
            var accountNumberText = $("#AccountNo option:selected").text().replace(/^\S+\s/, '');
            var debit = parseFloat($("#Debit").val().replace(/,/g, '')) || 0.00;
            var credit = parseFloat($("#Credit").val().replace(/,/g, '')) || 0.00;

            if (debit === 0 && credit === 0) {
                event.preventDefault();
                alert('Please input amount');
                return;
            } else if (accountNumberText === "") {
                event.preventDefault();
                alert('Please select Account No.!');
                return;
            }

            // Format debit and credit values with commas and two decimal places
            var formattedDebit = formatNumber(debit);
            var formattedCredit = formatNumber(credit);

            // Create a new row with the text only and a hidden input for the value
            var newRow = `<tr>
                                                                        <td>
                                                                            <input type='hidden' name='AccountNumber' value='${accountNumber}'/>
                                                                            <input type='text' name='AccountTitle' value='${accountNumberText}' style='border:none' class='w-100' readonly />
                                                                        </td>
                                                                        <td><input name='Debit' id='debit_${accountNumber}' value='${formattedDebit}' style='border:none' class='w-100' readonly /></td>
                                                                        <td><input name='Credit' id='credit_${accountNumber}' value='${formattedCredit}' style='border:none' class='w-100' readonly /></td>
                                                                        <td><button type='button' class='btn btn-danger btn-sm' onclick='removeRow(this)'>Remove</button></td>
                                                                 </tr>`;

            // Append the new row to the table body
            $("#accountingEntriesBody").append(newRow);

            // Close the modal
            $("#AddAccEntry").modal("hide");

            // Clear the modal inputs
            $("#AccountNo").val(""); // Reset the select to its default state
            $("#AccountNo").trigger("change"); // Trigger change event for the select
            $("#Debit").val("0.00");
            $("#Credit").val("0.00");

            updateTotalDebitAndCredit();
        }

        $(document).ready(function () {
            $("#calculateButton").click(updateTotalDebitAndCredit);
        });

        function updateTotalDebitAndCredit() {
            var totalDebit = 0;
            var totalDebitAmount = 0;
            var totalCredit = 0;
            var totalCreditAmount = 0;
            var creditAcctEntries = 0;

            // Loop through each row in the table body and sum up the debit values
            $("#accountingEntriesBody tr").each(function () {
                var debitInput = $(this).find("td:eq(1) input").val();
                var creditInput = $(this).find("td:eq(2) input").val();
                // Ensure debitInput and creditInput are strings before using replace
                debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                creditInput = creditInput ? String(creditInput) : "";

                var debit = parseNumber(debitInput);
                var credit = parseNumber(creditInput);

                totalDebit += debit;
                totalCredit += credit;
            });
            // Display the total debit value
            $(".totalDebit").text(formatNumber(totalDebit));
            $(".totalCredit").text(formatNumber(totalCredit));
        }

        // Function to remove the corresponding row
        function removeRow(button) {
            // Get the reference to the button's parent row and remove it
            $(button).closest("tr").remove();
            updateTotalDebitAndCredit();
        }
    </script>
    <script>
        $("#AccountNo").change(function () {
            var accountNumber = $(this).val();
            if (accountNumber.startsWith("10201") || accountNumber.startsWith("10105")) {
                // Close the modal
                $("#AddAccEntry").modal("hide");
                Swal.fire({
                    title: "Create Automatic Journal Entry",
                    text: "Do you want to create an automatic journal entry?",
                    icon: "question",
                    showCancelButton: true,
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    confirmButtonText: "Yes",
                    cancelButtonText: "No",
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return new Promise((resolve) => {
                            Swal.fire({
                                title: "Input Start Date and Number of Years",
                                html:
                                    "<input id='start-date' type='date' class='swal2-input' placeholder='Start Date'>" +
                                    "<input id='num-years' type='number' class='swal2-input' placeholder='Number of Years'>",
                                focusConfirm: false,
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                preConfirm: () => {
                                    return [
                                        $("#start-date").val(),
                                        $("#num-years").val()
                                    ];
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    resolve(result.value);
                                }
                            });
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Result contains an array with the start date and number of years
                        var startDate = result.value[0];
                        var numYears = result.value[1];
                        // Assign the values to hidden inputs in your form
                        $("#StartDate").val(startDate);
                        $("#NumberOfYears").val(numYears);
                        // Close the modal
                        $("#AddAccEntry").modal("show");
                    }
                });
            }
        });
    </script>
    <script>
        function validateDebitAndCredit(event) {
            var debit = parseNumber($(".totalDebit").text());
            var credit = parseNumber($(".totalCredit").text());
            if (debit !== credit) {
                event.preventDefault();
                alert('Total Debit and Credit do not match.');
                return;
            }
        }
    </script>
    <script>
        setTransactionDate();
    </script>
    <script>
        $(document).ready(function () {

            $('.js-select-defaultExpense').select2({
                placeholder: "Select an option...",
                allowClear: true,
                width: 'resolve',
                theme: 'classic',
                multiple: false // Set multiple to false if the model data is an array, true otherwise
            });
        });
    </script>
}
