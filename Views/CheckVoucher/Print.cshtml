@using Accounting_System.Models.ViewModels
@using Accounting_System.Utility
@model CheckVoucherVM
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using Humanizer

@{
    ViewData["Title"] = "Disbursment Voucher";
}

<br />
<div class="text-end">
    <img src="~/img/Filpride.jpg" height="" width="130px" />
</div>
<div class="text-center">
    <h2><u><b>&nbsp;FILPRIDE RESOURCES INC.&nbsp;</b></u></h2>
    <p style="line-height: 1; margin-top:-7px;">
        57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone,<br />
        Kalaklan, Olongapo City, 2200 Zambales, Philippines<br />
        VAT Reg. TIN: 000-216-589-00000
    </p>

    <h3><span style="display: inline-block;"><b>DISBURSEMENT VOUCHER</b></span></h3>
    <div class="text-end" style="margin-top:-60px;">
        @{
            string cvNo = "";
            if(Model.Header.CVNo != null)
            {
                cvNo = Model.Header.CVNo;
            }
            else
            {
                cvNo = Model.Header.Reference + "-" + Model.Header.Sequence.ToString("D3");
            }
        }
        <h6><b>No.&nbsp;@Html.DisplayFor(model => cvNo)</b></h6>
    </div>

</div>

<div class="table-responsive" style="margin-top:50px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="2" style="padding-left:20px;">I. PAYEE DETAILS</th>
                <td colspan="2" class="text-end"><b>Date : </b>@Model.Header.Date.ToShortDateString()</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="width:10%; padding-left:20px;">Name :</td>
                <td >@Html.DisplayFor(model => model.Header.Supplier.Name)</td>
                <td style="width:50%;" colspan="2" class="text-nowrap">Other References:</td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Address :</td>
                <td>@Html.DisplayFor(model => model.Header.Supplier.Address)</td>
                <td style="width:5%;">PO # :</td>

                <td>
                    @for (int i = 0; i < Model.Header.PONo.Length; i++)
                    {
                        if (i != Model.Header.PONo.Length -1)
                        {
                            <span>@Model.Header.PONo[i],</span>
                        }
                        else
                        {
                            <span>@Model.Header.PONo[i]</span>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td style="padding-left:20px;">TIN # :</td>
                <td>@Html.DisplayFor(model => model.Header.Supplier.TinNo)</td>
                <td>SI # :</td>
                <td>
                    @if(Model.Header.Category == "Non-Trade")
                    {
                        @for (int i = 0; i < Model.Header.SINo.Length; i++)
                        {
                            if (i != Model.Header.SINo.Length - 1)
                            {
                                <span>@Model.Header.SINo[i],</span>
                            }
                            else
                            {
                                <span>@Model.Header.SINo[i]</span>
                            }
                        }
                    }
                    else if (Model.Header.Category == "Trade")
                    {
                        bool isFirst = true;
                        foreach (var item in ViewBag.SINoArray)
                        {
                            if (isFirst)
                            {
                                isFirst = false;
                            }
                            else
                            {
                                <span>,</span>
                            }
                            <span>@item</span>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td style="padding-left:20px;" class="text-nowrap"></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>
<div class="table-responsive" style="margin-top:20px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="4" style="padding-left:20px;">II. CHECK DETAILS</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="width:15%; padding-left:20px;">Payee :</td>
                <td style="width:65%;">@Html.DisplayFor(model => model.Header.Payee)</td>
                <td class="text-end">
                    @if (Model.Header.Amount != 0)
                    {
                        <p>@Model.Header.Amount</p>
                    }
                </td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Amount in Words :</td>
                @{
                    decimal convertToWords = Model.Header.Amount;

                    int integerPart = Convert.ToInt32(Math.Floor(convertToWords));
                    decimal decimalPart = Math.Round((convertToWords - integerPart), 2);

                    // Convert integer part to words
                    string integerWords = integerPart.ToWords();
                    integerWords = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(integerWords.ToLower());

                    // Convert and format cents value
                    int cents = Convert.ToInt32(decimalPart * 100) % 100;
                    string centsWords = cents.ToWords(); // Use ToWords instead of string formatting
                    centsWords = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(centsWords.ToLower());

                    string upperCaseOne = integerWords;
                    string upperCaseTwo = centsWords;

                    // Combine words and formatting
                    string words;

                    if (cents > 0)
                    {
                        // If there is a decimal part, include "And" before it
                        words = $"{upperCaseOne} Pesos and {upperCaseTwo} Centavos Only";
                    }
                    else
                    {
                        // If there is no decimal part, exclude "And"
                        words = $"{upperCaseOne} Pesos Only";
                    }

                    // Capitalize first letters
                    // words = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(words.ToLower());

                    words = words.Replace(" And", "");
                    words = words.Replace("-", " ");
                }
                <td class="w-25">
                    @if (Model.Header.Amount != 0)
                    {
                        <p>*** @words ***</p>
                    }
                </td>
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Particulars :</td>
                <td>@Html.DisplayFor(model => model.Header.Particulars)</td>
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Check #:</td>
                <td>@Html.DisplayFor(model => model.Header.CheckNo)</td>
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Check Date:</td>
                <td>
                    @if (Model.Header.AccruedType != "Invoicing")
                    {
                        @Html.DisplayFor(model => model.Header.CheckDate)
                    }
                </td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>

<div class="table-responsive" style="margin-top:20px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="4" style="padding-left:20px;">III. ACCOUNTING ENTRIES</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="padding-left:20px;"></td>
                <th class="text-end">DEBIT</th>
                <th class="text-end">CREDIT</th>
            </tr>

        @foreach (var cv in Model.Details)
            {
            <tr>
                <td style="width:60%; padding-left:20px;">@Html.DisplayFor(model => cv.AccountNo)&nbsp;@Html.DisplayFor(model => cv.AccountName)</td>
                <td class="text-end" style="width:7%;">@Html.DisplayFor(model => cv.Debit)</td>
                <td class="text-end" style="width:7%;">@Html.DisplayFor(model => cv.Credit)</td>
                </tr>
            }

            <tr style="border-bottom:double;"></tr>
            <tr>
                <td></td>
                <td class="text-end">@Html.DisplayFor(model => model.Header.TotalDebit)</td>
                <td class="text-end">@Html.DisplayFor(model => model.Header.TotalCredit)</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="table-responsive" style="margin-top:20px;">
    <table class="w-100">
        <tbody class="text-center">
            <tr>
                <td>Prepared by :</td>
                <td>Reviewed by </td>
                <td>Approved by </td>
            </tr>
            <tr>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">&nbsp;</span> <br />

                    </td>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">&nbsp;</span> <br />

                </td>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">&nbsp;</span> <br />

                </td>
            </tr>
        </tbody>
    </table>
</div>
<br />

<div class="text-center w-100" style="margin-top:20px;">
    <p >
        <em><strong>"THIS DOCUMENT IS NOT VALID FOR CLAIM OF INPUT TAX"</strong></em><br /><br />
        <span>Acknowledgement Certificate No:</span>
        <span style="display: inline-block; width:150px;"></span>
        <span>&nbsp;&nbsp;Date Issued:</span>
        <span style="display: inline-block; width:50px;"></span><br />
        Series: CV0000000001 - CV9999999999
        Date and Time Created:&nbsp; @Html.DisplayFor(model => model.Header.CreatedDate)
    </p>
</div>
<br />

<div class="text-start w-100 footer" style="margin-top:50px;">
    <p style="line-height: 1;">
        <em>
            <strong>Software Name :</strong> Accounting Administration System (AAS)
            <br />
            <strong>Version :</strong> @CS.Version
            <br />
            <strong>Printed By :</strong> @UserManager.GetUserName(User).ToUpper()
            <br />
            <strong>Date & Time Printed :</strong> @DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
        </em>
    </p>
</div>

@if (!Model.Header.IsPrinted)
{
    <div class="text-end">
        ORIGINAL COPY
    </div>
}
else
{
    <div class="text-end">
        REPRINT COPY
    </div>
}

<div>
    <a asp-action="Printed" class="btn btn-success" asp-route-id="@Model.Header.Id" onclick="printPage()" id="printButton">Print</a>
    <a asp-action="Index" class="btn" id="otherButton">Back</a>
</div>

@section Scripts{
    <script>
        var originalFontSizes = [];
        function printPage() {
            var printButton = document.getElementById("printButton");
            var otherButton = document.getElementById("otherButton");

            // Hide the header and footer
            document.querySelector("header").style.display = "none";
            document.querySelector("footer").style.display = "none";

            // Hide the buttons before printing
            if (printButton) {
                printButton.style.visibility = "hidden";
            }
            if (otherButton) {
                otherButton.style.visibility = "hidden";
            }

            // Get all paragraph elements
            var paragraphs = document.querySelectorAll("p");

            // Store the original font sizes
            for (var i = 0; i < paragraphs.length; i++) {
                originalFontSizes[i] = paragraphs[i].style.fontSize;
                // Set the font size of all paragraph elements to 12px for printing
                paragraphs[i].style.fontSize = "12px";
            }

            // Get all table text elements
            var mytable = document.querySelectorAll("table");

            // Store the original font sizes
            for (var i = 0; i < mytable.length; i++) {
                originalFontSizes[i] = mytable[i].style.fontSize;
                // Set the font size of all paragraph elements to 12px for printing
                mytable[i].style.fontSize = "12px";
            }

            // Call the print function
            window.print();

            // Restore the font sizes
            for (var i = 0; i < paragraphs.length; i++) {
                paragraphs[i].style.fontSize = originalFontSizes[i];
            }

            // Restore the font sizes
            for (var i = 0; i < mytable.length; i++) {
                mytable[i].style.fontSize = originalFontSizes[i];
            }

            // Restore the buttons' visibility after printing (optional)
            if (printButton) {
                printButton.style.visibility = "visible";
            }
            if (otherButton) {
                otherButton.style.visibility = "visible";
            }

            // Restore the header and footer's visibility after printing (optional)
            document.querySelector("header").style.display = "";
            document.querySelector("footer").style.display = "";
        }
    </script>
}