@using System.ComponentModel.DataAnnotations;
@model Accounting_System.Models.CheckVoucherVM

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<partial name="_Notification">
<h1>Create</h1>

<h4>Check Voucher</h4>
<hr />

<form asp-action="Create" method="post" enctype="multipart/form-data" id="myform">
 <div class="row">
      <div class="col-md-4">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <fieldset class="form-group mb-3">
            <legend></legend>

            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="Header.Category" id="inlineRadio1" value="Trade" aria-labelledby="labelInlineRadio1" onclick="toggleSelect('tradeList')">
                <label class="form-check-label" for="inlineRadio1" id="labelInlineRadio1">Trade</label>
            </div>

            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="Header.Category" id="inlineRadio2" value="Non-Trade" aria-labelledby="labelInlineRadio2" onclick="toggleSelect('nTradeList')">
                <label class="form-check-label" for="inlineRadio2" id="labelInlineRadio2">Non-Trade</label>
            </div>
            <br />
            <span asp-validation-for="Header.Category" class="text-danger"></span>
        </fieldset>
        <fieldset class="form-group nTradeList mb-3" style="display: none;">
            <legend></legend>

            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="Header.AccruedType" id="inlineRadio4" value="Payment" aria-labelledby="labelInlineRadio4" onclick="updateTotalDebitAndCredit('paymentAccrued')">
                <label class="form-check-label" for="inlineRadio4" id="labelInlineRadio4">Payment</label>
            </div>

            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="Header.AccruedType" id="inlineRadio3" value="Invoicing" aria-labelledby="labelInlineRadio3" onclick="updateTotalDebitAndCredit('invoicingAccrued')">
                <label class="form-check-label" for="inlineRadio3" id="labelInlineRadio3">Invoicing</label>
            </div>

            <br />
            <span asp-validation-for="Header.Category" class="text-danger"></span>
        </fieldset>
        <div class="form-group invoicingAccrued mb-3 tradeList">
            <label class="control-label">Supplier</label>
            <select asp-for="Header.SupplierId" asp-items="@Model.Header.Suppliers" class="form-select js-select2 GetPOList supplier" id="supplierSelect">
                <option></option>
            </select>
        </div>
        <div class="form-group mb-3 paymentAccrued nTradeList tradeList">
            <label class="control-label">CV #</label>
            <select asp-for="Header.Reference" asp-items="@Model.Header.CheckVouchers" class="form-select js-select2 checkVoucher" >
                <option></option>
            </select>
        </div>
        <div class="form-group pb-3 paymentAccrued tradeList mb-3">
                <label asp-for="Header.Payee" class="control-label"></label>
                <input asp-for="Header.Payee" type="text" class="form-control supplierName" id="payeeInput"/>
        </div>
        <div class="form-group pb-3">
                <input type="text" class="form-control" id="supplierAddress" readonly/>
        </div>
        <div class="form-group">
                <input type="text" class="form-control" id="supplierTinNo" readonly/>
        </div>
        <div class="nTradeList invoicingAccrued tradeList" style="display: none;">
        <div class="form-group">
            <label class="control-label">PO No.<span class="required">*</span></label>
            <textarea name="poNo" class="form-control" placeholder="Enter PO No." style="height: 100px"></textarea>
        </div>
        <div class="form-group">
            <label class="control-label">SI No.<span class="required">*</span></label>
            <textarea name="siNo" class="form-control" placeholder="Enter SI No." style="height: 100px"></textarea>
        </div>
        </div>
        <div class="tradeList">
        <div class="form-group">
            <label class="control-label">PO No.</label>
            <select asp-for="Header.PONo" asp-items="@Model.Header.PO" class="form-select js-multiple-not-retain-value GetRRList" multiple="multiple" id="poSelect">
                <option></option>
            </select>
        </div>
        <div class="form-group">
            <input type="hidden" id="criteriaInput" name="criteria" />
            <label class="control-label">RR NO.</label>
                <select asp-for="Header.RRNo" asp-items="@Model.Header.RR" class="form-select js-multiple-not-retain-value" multiple="multiple" id="rrSelect">
                <option></option>
            </select>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th class="w-100">RR List</th>
                    <th class="w-20">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody class="rrAmountList">
            </tbody>
        </table>
        </div>
        <div class="form-group">
            <label asp-for="Header.Date" class="control-label"></label>
            <input asp-for="Header.Date" type="Date" class="form-control" />
            <span asp-validation-for="Header.Date" class="text-danger"></span>
        </div>
        <div class="form-group nTradeList paymentAccrued" style="display: none;">
                <label asp-for="Header.Amount" class="control-label"></label>
                <input asp-for="Header.Amount" type="text" class="form-control totalAmount" />
                <span asp-validation-for="Header.Amount" class="text-danger"></span>
        </div>
        <div class="paymentAccrued tradeList">
        <div class="form-group">
            <label asp-for="Header.BankId" class="control-label"></label>
            <select asp-for="Header.BankId" asp-items="@Model.Header.BankAccounts" id ="bankAccounts" class="form-select js-select2">
                <option></option>
            </select>
        </div>
        <div class="form-group">
            <label asp-for="Header.CheckNo" class="control-label"></label>
            <input asp-for="Header.CheckNo" type="text" class="form-control" />
            <span asp-validation-for="Header.CheckNo" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Header.CheckDate" class="control-label"></label>
            <input asp-for="Header.CheckDate" type="date" class="form-control" />
            <span asp-validation-for="Header.CheckDate" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Header.Particulars" class="control-label"></label>
            <input asp-for="Header.Particulars" type="text" class="form-control" />
            <span asp-validation-for="Header.Particulars" class="text-danger"></span>
        </div>
        </div>

        <div class="form-group mb-3">
            <label class="control-label">Upload File (Optional)</label>
            <input name="file" type="file" class="form-control" />
        </div>
</div>
        <div class="col-8 tradeList">
            <div class="row pb-3">
            <table style="border:dotted 1px;">
                <thead class="m-2">
                    <tr>
                        <th colspan="6" class="text-center py-4">RR AMOUNT</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style="width:19%; padding-left:20px;">RR No's</th>
                        <th class="text-end" style="width:14%;">Gross</th>
                        <th class="text-end" style="width:14%;">Net of Vat</th>
                        <th class="text-end" style="width:14%;">Vat</th>
                        <th class="text-end" style="width:14%;">EWT</th>
                        <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                    </tr>
                </tbody>
                <tbody class="rrAmount">
                </tbody>
                <tbody>
                    <tr style="border-bottom:double;">
                        <td class="pt-1"></td>
                    </tr>
                    <tr>
                        <td class="text-end fw-bold p-3">Grand Total:</td>
                        <td class="text-end" id="grandTotalRRAmount">0.00</td>
                        <td class="text-end" id="grandTotalNetAmount">0.00</td>
                        <td class="text-end" id="grandTotalVatAmount">0.00</td>
                        <td class="text-end" id="grandTotalEWTAmount">0.00</td>
                        <td class="text-end" id="grandTotalNetOfEWT" style="padding-right:20px;">0.00</td>
                    </tr>
                </tbody>
            </table>
            </div>
            <div class="row pb-3">
            <table style="border:dotted 1px;">
                <thead class="m-2">
                    <tr>
                        <th colspan="6" class="text-center py-4">PAYMENT</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style="width:19%; padding-left:20px;">RR No's</th>
                        <th class="text-end" style="width:14%;">Gross</th>
                        <th class="text-end" style="width:14%;">Net of Vat</th>
                        <th class="text-end" style="width:14%;">Vat</th>
                        <th class="text-end" style="width:14%;">EWT</th>
                        <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                    </tr>
                </tbody>
                <tbody class="payment">
                </tbody>
                <tbody>
                    <tr style="border-bottom:double;">
                        <td class="pt-1"></td>
                    </tr>
                    <tr>
                        <td class="text-end fw-bold p-3">Grand Total:</td>
                        <td class="text-end" id="grandTotalPayment">0.00</td>
                        <td class="text-end" id="grandTotalNetOfVatPayment">0.00</td>
                        <td class="text-end" id="grandTotalVatPayment">0.00</td>
                        <td class="text-end" id="grandTotalEWTPayment">0.00</td>
                        <td class="text-end" id="grandTotalNetOfEWTPayment" style="padding-right:20px;">0.00</td>
                    </tr>
                </tbody>
            </table>
            </div>
            <div class="row">
            <table style="border:dotted 1px;">
                <thead class="m-2">
                    <tr>
                        <th colspan="6" class="text-center py-4">REMAINING BALANCE</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style="width:19%; padding-left:20px;">RR No's</th>
                        <th class="text-end" style="width:14%;">Gross</th>
                        <th class="text-end" style="width:14%;">Net of Vat</th>
                        <th class="text-end" style="width:14%;">Vat</th>
                        <th class="text-end" style="width:14%;">EWT</th>
                        <th class="text-end" style="width:25%; padding-right:20px;">Net of EWT</th>
                    </tr>
                </tbody>
                <tbody class="balance">
                </tbody>
                <tbody>
                    <tr style="border-bottom:double;">
                        <td class="pt-1"></td>
                    </tr>
                    <tr>
                        <td class="text-end fw-bold p-3">Grand Total:</td>
                        <td class="text-end" id="grandTotal">0.00</td>
                        <td class="text-end" id="grandTotalNetOfVat">0.00</td>
                        <td class="text-end" id="grandTotalVat">0.00</td>
                        <td class="text-end" id="grandTotalEWT">0.00</td>
                        <td class="text-end" id="grandTotalRRAmountNetOfEWT" style="padding-right:20px;">0.00</td>
                    </tr>
                </tbody>
            </table>
            </div>
        </div>
<br />
            <div class="form-group">
                <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#AddAccEntry">
                    Add Entry
                </button>
                <table class="table">
                    <thead>
                        <tr>
                            <th class="w-50">Account No.</th>
                            <th class="w-25">
                                Debit
                            </th>
                            <th class="w-25">
                                Credit
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="accountingEntriesBody">
                            <tr>
                                <td><input id="accountType" type='text' value='2010101 AP-Trade Payable' class="w-100" style='border:none' readonly /></td>
                                <td ><input type='text' name='netOfEWT' value='0.00' class="w-100 totalNetOfEWT netOfEWT" style='border:none' readonly /></td>
                                <td><input type='text' name='apNonTradePayable' value='0.00' class="w-100 totalDebitAmount" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr class="EWTDebit tradeList paymentAccrued">
                                <td><input type='text' value='2010302 Expanded Witholding Tax 1%' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name='expandedWTaxDebitAmount' value='0.00' class="w-100 totalEWT ewt" style='border:none' readonly /></td>
                                <td>0.00</td>
                                <td></td>
                            </tr>
                            <tr class="EWTCredit tradeList paymentAccrued">
                                <td><input type='text' value='2010302 Expanded Witholding Tax 1%' class="w-100" style='border:none' readonly /></td>
                                <td>0.00</td>
                                <td><input type='text' name='expandedWTaxCreditAmount' value='0.00' class="w-100 totalEWT ewt" style='border:none' readonly /></td>
                                <td></td>
                            </tr>

                            <tr class="paymentAccrued">
                                <td><input type='text' id="accountNoAndTitle" name="accountNoAndTitle" class="w-100" style='border:none' readonly /></td>
                                <td>0.00</td>
                                <td><input type='text' name='cashInBankAmount' class="w-100 totalNetOfEWT netOfEWT" style='border:none' value="0.00" readonly /></td>
                                <td></td>
                            </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <td class="text-end">TOTAL:</td>
                            <td class="totalDebit">0.00</td>
                            <td class="totalCredit">0.00</td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <br />
        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-primary"/>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </div>
</form>


    <!-- Modal -->
    <div class="modal fade" id="AddAccEntry" data-bs-backdrop="static" tabindex="-1" aria-labelledby="AddAccEntryLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="AddAccEntryLabel">Add Accounting Entry</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-group">
                            <label class="control-label">Account No.</label>
                            <select asp-items="@Model.Header?.COA" class="form-select automaticEntry" style="width: 100%" id="AccountNo">
                                <option></option>
                            </select>
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group pt-4">
                            <label class="control-label">Debit</label>
                            <input id="Debit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group pt-4">
                            <label class="control-label">Credit</label>
                            <input id="Credit" value="0.00" class="form-control moneyInput" placeholder="0.00" />
                            <span class="text-danger"></span>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="calculateButton" onclick="saveAccountingEntry()">Create</button>
                </div>
            </div>
        </div>
    </div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#AccountTitle').select2({
            dropdownParent: $('#AddAccEntry')
        });
    </script>
    <script>
        function toggleSelect(className) {
            var tradeLists = document.querySelectorAll('.tradeList');
            var nTradeLists = document.querySelectorAll('.nTradeList');
            var accountType = document.getElementById('accountType');

            if (className === 'tradeList') {
                tradeLists.forEach(function (tradeList) {
                    tradeList.style.display = 'table-row';
                });
                nTradeLists.forEach(function (nTradeList) {
                    nTradeList.style.display = 'none';
                });
                accountType.value = '2010101 AP-Trade Payable';
            } else if (className === 'nTradeList') {
                tradeLists.forEach(function (tradeList) {
                    tradeList.style.display = 'none';
                });
                nTradeLists.forEach(function (nTradeList) {
                    nTradeList.style.display = 'block';
                });
                accountType.value = '2010102 AP-Non-Trade Payable';
            }
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#supplierSelect').change(function () {
                $('#payeeInput').val($(this).find(':selected').text());
            });
        });
    </script>
    <script>
        $(function () {
            $(".GetPOList").change(function () {
                var suppId = $(this).val();
                console.log(suppId); // Add this line for debugging
                if (suppId !== "") {
                    // Make an AJAX request to get the POs based on the selected SupplierId
                    $.ajax({
                        url: "/CheckVoucher/GetPOs",
                        method: "GET",
                        data: { supplierId: suppId }, // Corrected parameter name
                        success: function (data) {
                            console.log(data); // Log the returned data for debugging
                            if (data) {
                                // Clear existing options
                                $("#poSelect").empty();
                                // Add new options based on the fetched data
                                $.each(data, function (index, po) {
                                    console.log(po); // Log each PO for debugging
                                    if (po && po.poNumber) { // Adjust property name to poNumber
                                        $('#poSelect').append('<option value="' + po.poNumber + '">' + po.poNumber + '</option>'); // Adjust property names
                                    } else {
                                        console.error("Invalid PO object:", po);
                                    }
                                });
                            } else {
                                // Clear the fields if no POs are found
                                $("#poSelect").empty();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching POs:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $("#poSelect").empty();
                }
            });
        });
    </script>
    <script>
        $(function criteria() {
            var criteria; // Variable to store the selected criteria

            $(".GetRRList").change(function () {
                var poNumber = $(this).val(); // Get all selected POIds
                console.log(poNumber); // Add this line for debugging
                if (poNumber && poNumber.length > 0) {

                    if (!criteria) {
                        Swal.fire({
                            title: 'Choose Criteria',
                            text: 'Do you want to display records based on Due Date or Transaction Date?',
                            input: 'select',
                            inputOptions: {
                                'Due Date': 'Due Date',
                                'Transaction Date': 'Transaction Date'
                            },
                            inputPlaceholder: 'Select display criteria',
                            allowOutsideClick: false, // Prevent closing on outside click
                            allowEscapeKey: false,  // Prevent closing with Esc key
                            showCancelButton: true,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                criteria = result.value; // Store the selected criteria
                                if (criteria) {
                                    displayRecords(poNumber, criteria); // Pass criteria and PO numbers to displayRecords function
                                } else {
                                    console.error('Invalid display criteria');
                                }
                            } else {
                                criteria();
                                console.log('User canceled');
                            }
                        });
                    } else {
                        if (poNumber && poNumber.length > 0) {
                            displayRecords(poNumber, criteria); // Pass PO number and criteria to displayRecords function
                        } else {
                            console.error('No PO number selected');
                        }
                    }
                } else {
                    // Clear the fields if no POs are selected
                    $("#rrSelect").empty();
                }
            });
        });

        function displayRecords(poNumber, criteria) {
            // Make an AJAX request to get the RRs based on the selected POIds and display criteria
            $.ajax({
                url: "/CheckVoucher/GetRRs",
                method: "GET",
                data: { poNumber: poNumber, criteria : criteria }, // Pass PO numbers to controller
                traditional: true, // Ensure jQuery sends the array properly
                success: function (data) {
                    console.log(data); // Log the returned data for debugging
                    if (data) {
                        // Clear existing options
                        $("#rrSelect").empty();
                        // Add new options based on the fetched data
                        $.each(data, function (index, rr) {
                            console.log(rr); // Log each RR for debugging
                            if (rr && rr.rrNumber) { // Adjust property name to RRNumber
                                $('#rrSelect').append('<option value="' + rr.rrNumber + '">' + rr.rrNumber + '</option>'); // Adjust property names
                            } else {
                                console.error("Invalid RR object:", rr);
                            }
                        });
                    } else {
                        // Clear the fields if no RRs are found
                        $("#rrSelect").empty();
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching RRs:', error);
                }
            });
        }
    </script>
    <script>
        function saveAccountingEntry() {
            // Get the values from the modal inputs
            var accountNumber = $("#AccountNo").val();
            var accountNumberText = $("#AccountNo option:selected").text();
            var debit = $("#Debit").val();
            var credit = $("#Credit").val();

            // Create a new row with the text only and a hidden input for the value
            var newRow = `<tr>
                                        <td>
                                            <input type='hidden' name='accountNumber' value='${accountNumber}'/>
                                            <input type='text' name='accountNumberText' value='${accountNumberText}' style='border:none' class='w-100' readonly />
                                        </td>
                                        <td><input name='debit' id='debit_${accountNumber}' value='${debit}' style='border:none' class='w-100' readonly /></td>
                                        <td><input name='credit' id='credit_${accountNumber}' value='${credit}' style='border:none' class='w-100' readonly /></td>
                                        <td><button type='button' class='btn btn-danger btn-sm' onclick='removeRow(this)'>Remove</button></td>
                                        </tr>`;

            // Append the new row to the table body
            $("#accountingEntriesBody").append(newRow);

            // Close the modal
            $("#AddAccEntry").modal("hide");

            // Clear the modal inputs
            $("#AccountNo").val(""); // Reset the select to its default state
            $("#AccountNo").trigger("change"); // Trigger change event for the select
            $("#Debit").val("0.00");
            $("#Credit").val("0.00");

            updateTotalDebitAndCredit();
        }

        $(document).ready(function () {
            $("#calculateButton").click(updateTotalDebitAndCredit);
        });

        function updateTotalDebitAndCredit(className) {
            var invoicings = document.querySelectorAll('.invoicingAccrued');
            var payments = document.querySelectorAll('.paymentAccrued');

            if (className === 'paymentAccrued') {
                payments.forEach(function (paymentAccrued) {
                    paymentAccrued.style.display = 'table-row';
                });
                invoicings.forEach(function (invoicingAccrued) {
                    invoicingAccrued.style.display = 'none';
                });
            } else if (className === 'invoicingAccrued') {
                payments.forEach(function (paymentAccrued) {
                    paymentAccrued.style.display = 'none';
                });
                invoicings.forEach(function (invoicingAccrued) {
                    invoicingAccrued.style.display = 'block';
                });
            }

            var totalDebit = 0;
            var totalDebitAmount = 0;
            var totalCredit = 0;
            var totalCreditAmount = 0;
            var creditAcctEntries = 0;

            // Loop through each row in the table body and sum up the debit values
            $("#accountingEntriesBody tr").each(function () {
                var debitInput = $(this).find("td:eq(1) input").val();
                var creditInput = $(this).find("td:eq(2) input").val();
                var creditOnly = $(this).find("td:eq(2) input[name='credit']").val();
                // Ensure debitInput and creditInput are strings before using replace
                debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                creditInput = creditInput ? String(creditInput) : "";
                creditOnly = creditOnly ? String(creditOnly) : "";

                var debit = parseFloat(debitInput.replace(/,/g, '')) || 0;
                var credit = parseFloat(creditInput.replace(/,/g, '')) || 0;
                var creditEntry = parseFloat(creditOnly.replace(/,/g, '')) || 0;


                totalDebit += debit;
                totalCredit += credit;
                creditAcctEntries += creditEntry;
                totalCreditAmount += credit;
                totalDebitAmount += debit;
            });
            console.log(className)
            var total = className === 'invoicingAccrued' ? totalDebitAmount + creditAcctEntries : totalCredit;

            // Display the total debit value
            $(".totalDebit").text(totalDebit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $(".totalCredit").text(total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $(".totalDebitAmount").val(totalDebitAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

        // Function to remove the corresponding row
        function removeRow(button) {
            // Get the reference to the button's parent row and remove it
            $(button).closest("tr").remove();
            updateTotalDebitAndCredit();
        }

    </script>
    <script>
        $('#AccountNo').select2({
            dropdownParent: $('#AddAccEntry')
        });
    </script>
    <script>
        $(document).ready(function () {
            $("#rrSelect").change(function () {
                var rrSelect = $("#rrSelect").val();

                // Clear the table before adding new rows
                $(".rrAmountList").empty();
                $(".rrAmount").empty();
                $(".payment").empty();
                $(".balance").empty();

                // Loop through each selected option and add it to the table
                rrSelect.forEach(function (rrNo) {
                    var rrSelectText = $("#rrSelect option[value='" + rrNo + "']").text();
                    var newRow = `<tr>
                                                    <td>
                                                        <input type='hidden' name='rrNo' value='${rrNo}' />
                                                        <input type='text' name='rrNoText' value='${rrSelectText}' style='border:none' readonly />
                                                    </td>
                                                    <td><input type='text' name='amount' class='inputAmount moneyInput' id='paymentAmount_${rrNo}'/></td>
                                                </tr>`;
                    var rrAmount = `<tr id='row_${rrNo}'>
                                                        <td style='padding-left:20px;'>
                                                            <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                            <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                        </td>
                                                        <td class="text-end" id='amount_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='netAmount_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='vatAmount_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='ewtAmount_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='rrAmountNetOfEWT_${rrNo}' style="padding-right:20px;">0.00</td>
                                                    </tr>`;
                    var payment = `<tr id='row_${rrNo}'>
                                                        <td style='padding-left:20px;'>
                                                            <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                            <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                        </td>
                                                        <td class="text-end" id='payment_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='netOfVatPayment_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='vatPayment_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='ewtPayment_${rrNo}'>0.00</td>
                                                        <td class="text-end" id='rrAmountNetOfEWTPayment_${rrNo}' style="padding-right:20px;">0.00</td>
                                                    </tr>`;
                    var balance = `<tr id='row_${rrNo}'>
                                                    <td style='padding-left:20px;'>
                                                        <input type='hidden' name='rrNumber' value='${rrNo}' />
                                                        <input type='text' name='rrNumberText' value='${rrSelectText}' style='border:none' readonly />
                                                    </td>
                                                    <td class="text-end" id='balance_${rrNo}'>0.00</td>
                                                    <td class="text-end" id='NetOfVat_${rrNo}'>0.00</td>
                                                    <td class="text-end" id='Vat_${rrNo}'>0.00</td>
                                                    <td class="text-end" id='EWT_${rrNo}'>0.00</td>
                                                    <td class="text-end" id='RRAmountNetOfEWT_${rrNo}' style="padding-right:20px;">0.00</td>
                                                </tr>`;
                    $(".rrAmountList").append(newRow);
                    $(".rrAmount").append(rrAmount);
                    $(".payment").append(payment);
                    $(".balance").append(balance);

                    $("#paymentAmount_" + rrNo).on('input', function () {
                        var inputValue = $(this).val();
                        var netOfVat = inputValue / 1.12;
                        var vat = netOfVat * 0.12;
                        var ewt = netOfVat * 0.01;
                        var rrAmountNetOfEWT = inputValue - ewt;
                        var numericValue = parseFloat(inputValue.replace(/,/g, ''));
                        var formattedValue = numericValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        $("#payment_" + rrNo).text(formattedValue);
                        $("#netOfVatPayment_" + rrNo).text(netOfVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#vatPayment_" + rrNo).text(vat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#ewtPayment_" + rrNo).text(ewt.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                        $("#rrAmountNetOfEWTPayment_" + rrNo).text(rrAmountNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

                        //Recalculate grand Total computted payment
                        calculateGrandTotalPayment();
                    });

                    if (rrNo !== "") {
                        // Make an AJAX request to get the balance based on the selected RRNo
                        $.ajax({
                            url: "/CheckVoucher/RRBalance",
                            method: "GET",
                            data: { rrNo: rrNo },
                            success: function (data) {
                                if (data.balance !== null) {
                                    $("#paymentAmount_" + rrNo).on('input', function () {
                                        var inputValue = $(this).val();
                                        var balance = data.amount - inputValue;

                                        var netOfVat = balance / 1.12;
                                        var vat = netOfVat * 0.12;
                                        var ewt = netOfVat * 0.01;
                                        var rrAmountNetOfEWT = balance - ewt;

                                        $("#balance_" + rrNo).text(balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#NetOfVat_" + rrNo).text(netOfVat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#Vat_" + rrNo).text(vat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#EWT_" + rrNo).text(ewt.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                                        $("#RRAmountNetOfEWT_" + rrNo).text(rrAmountNetOfEWT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

                                        //Recalculate grand Total computted
                                        calculateGrandTotal();
                                    });
                                }
                                if (data !== null) {
                                    //compute / show existing RR
                                    $("#amount_" + rrNo).text(data.amount.toFixed(2));
                                    $("#netAmount_" + rrNo).text(data.netAmount.toFixed(2));
                                    $("#vatAmount_" + rrNo).text(data.vatAmount.toFixed(2));
                                    $("#ewtAmount_" + rrNo).text(data.ewtAmount.toFixed(2));
                                    var rrAmountNetOfEWT_ = data.amount - data.ewtAmount;
                                    $("#rrAmountNetOfEWT_" + rrNo).text(rrAmountNetOfEWT_.toFixed(2));

                                    // Recalculate grand total of existing RR
                                    calculateGrandTotalRRAmount()
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Error fetching balance:', error);
                            }
                        });
                    }
                });
            });
        });

        //Compute Grand Total Balance
        function calculateGrandTotal() {
            var grandTotal = 0;
            var grandTotalNetOfVat = 0;
            var grandTotalVat = 0;
            var grandTotalEWT = 0;
            var grandTotalRRAmountNetOfEWT = 0;

            $(".balance tr").each(function () {
                var balance = parseFloat($(this).find("[id^='balance_']").text());
                grandTotal += balance;

                var netOfVat = parseFloat($(this).find("[id^='NetOfVat_']").text());
                grandTotalNetOfVat += netOfVat;

                var vat = parseFloat($(this).find("[id^='Vat_']").text());
                grandTotalVat += vat;

                var ewt = parseFloat($(this).find("[id^='EWT_']").text());
                grandTotalEWT += ewt;

                var rrAmountNetOfEWT = parseFloat($(this).find("[id^='RRAmountNetOfEWT_']").text());
                grandTotalRRAmountNetOfEWT += rrAmountNetOfEWT;
            });

            // Update grand total in the table
            $("#grandTotal").text(grandTotal.toFixed(2));
            $("#grandTotalNetOfVat").text(grandTotalNetOfVat.toFixed(2));
            $("#grandTotalVat").text(grandTotalVat.toFixed(2));
            $("#grandTotalEWT").text(grandTotalEWT.toFixed(2));
            $("#grandTotalRRAmountNetOfEWT").text(grandTotalRRAmountNetOfEWT.toFixed(2));
        }

        function calculateGrandTotalRRAmount() {
            var grandTotalRRAmount = 0;
            var grandTotalNetAmount = 0;
            var grandTotalVatAmount = 0;
            var grandTotalEWTAmount = 0;
            var grandTotalNetOfEWT = 0;

            $(".rrAmount tr").each(function () {
                var amount = parseFloat($(this).find("[id^='amount_']").text());
                grandTotalRRAmount += amount;

                var netAmount = parseFloat($(this).find("[id^='netAmount_']").text());
                grandTotalNetAmount += netAmount;

                var vatAmount = parseFloat($(this).find("[id^='vatAmount_']").text());
                grandTotalVatAmount += vatAmount;

                var ewtAmount = parseFloat($(this).find("[id^='ewtAmount_']").text());
                grandTotalEWTAmount += ewtAmount;

                var rrAmountNetOfEWT = parseFloat($(this).find("[id^='rrAmountNetOfEWT_']").text());
                grandTotalNetOfEWT += rrAmountNetOfEWT;
            });

            // Update grand total in the table
            $("#grandTotalRRAmount").text(grandTotalRRAmount.toFixed(2));
            $("#grandTotalNetAmount").text(grandTotalNetAmount.toFixed(2));
            $("#grandTotalVatAmount").text(grandTotalVatAmount.toFixed(2));
            $("#grandTotalEWTAmount").text(grandTotalEWTAmount.toFixed(2));
            $("#grandTotalNetOfEWT").text(grandTotalNetOfEWT.toFixed(2));
        }

        function calculateGrandTotalPayment() {
            var grandTotalPayment = 0;
            var grandTotalNetOfVatPayment = 0;
            var grandTotalVatPayment = 0;
            var grandTotalEWTPayment = 0;
            var grandTotalNetOfEWTPayment = 0;

            $(".payment tr").each(function () {
                var paymentInput = $(this).find("[id^='payment_']").text();
                var payment = parseFloat(paymentInput.replace(/,/g, '')) || 0;
                grandTotalPayment += payment;

                var netOfVatPaymentInput = $(this).find("[id^='netOfVatPayment_']").text();
                var netOfVatPayment = parseFloat(netOfVatPaymentInput.replace(/,/g, '')) || 0;
                grandTotalNetOfVatPayment += netOfVatPayment;

                var vatPaymentInput = $(this).find("[id^='vatPayment_']").text();
                var vatPayment = parseFloat(vatPaymentInput.replace(/,/g, '')) || 0;
                grandTotalVatPayment += vatPayment;

                var ewtPaymentInput = $(this).find("[id^='ewtPayment_']").text();
                var ewtPayment = parseFloat(ewtPaymentInput.replace(/,/g, '')) || 0;
                grandTotalEWTPayment += ewtPayment;

                var rrAmountNetOfEWTPaymentInput = $(this).find("[id^='rrAmountNetOfEWTPayment_']").text();
                var rrAmountNetOfEWTPayment = parseFloat(rrAmountNetOfEWTPaymentInput.replace(/,/g, '')) || 0;
                grandTotalNetOfEWTPayment += rrAmountNetOfEWTPayment;
            });

            // Update grand total in the table
            $("#grandTotalPayment").text(grandTotalPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfVatPayment").text(grandTotalNetOfVatPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalVatPayment").text(grandTotalVatPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalEWTPayment").text(grandTotalEWTPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            $("#grandTotalNetOfEWTPayment").text(grandTotalNetOfEWTPayment.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
        }

    </script>
    <script>
        $(function () {
            function handleSupplierChange() {
                var suppId = $(".supplier").val();
                var cvId = $(".checkVoucher").val();
                if (suppId !== "" || cvId !== null) {
                    // Make an AJAX request to get the TaxType based on the selected SupplierId
                    $.ajax({
                        url: "/CheckVoucher/GetSI",
                        method: "GET",
                        data: { supplierId: suppId, cvId : cvId },
                        success: function (data) {
                            console.log(data); // Log the returned data for debugging
                            if (data.taxType === "Withholding Tax") {
                                $(".EWTDebit, .EWTCredit").show(); // Show the EWT table rows
                            } else {
                                $(".EWTDebit, .EWTCredit").hide(); // Hide the EWT table rows
                            }
                            if (data.address !== null || data.tinNo !== null) {
                                $("#supplierAddress").val(data.address);
                                $("#supplierTinNo").val(data.tinNo);
                                $(".supplierName").val(data.name);
                            } else {
                                $("#supplierAddress").val("");
                                $("#supplierTinNo").val("");
                                $(".supplierName").val("");
                            }
                            $(document).ready(function () {
                                $("#rrSelect").change(function () {
                                    updateAmounts();
                                });

                                $(document).on('input', '.inputAmount', function () {
                                    updateAmounts();
                                });

                                $(".totalAmount").on('input', function () {
                                    computation();
                                });

                                function computation() {
                                    var netOfEWT = 0;
                                    var totalAmountEWT = 0;
                                    if (data.taxType === "Withholding Tax") {
                                        var totalAmountVal = parseFloat($(".totalAmount").val());
                                        var netOfVatAmount = totalAmountVal / 1.12;
                                        var vatAmount = netOfVatAmount * 0.12;
                                        var ewtAmount = netOfVatAmount * 0.01;
                                        var rrAmountNetOfEWTAmount = totalAmountVal - ewtAmount;
                                        netOfEWT = rrAmountNetOfEWTAmount;
                                        totalAmountEWT = ewtAmount;
                                    } else {
                                        var totalAmountVal = parseFloat($(".totalAmount").val());
                                        netOfEWT = totalAmountVal;
                                    }
                                    $(".netOfEWT").val(netOfEWT.toFixed(2));
                                    $(".ewt").val(totalAmountEWT.toFixed(2));

                                    updateTotalDebitAndCredit();
                                }

                                function updateAmounts() {
                                    var amountInputs = document.querySelectorAll('.inputAmount');
                                    var totalNetOfEWT = 0;
                                    var totalEWT = 0;
                                    amountInputs.forEach(function (input) {
                                        if (data.taxType === "Withholding Tax") {
                                            var rrAmount = parseFloat(input.value);
                                            var netOfVat = rrAmount / 1.12;
                                            var vat = netOfVat * 0.12;
                                            var ewt = netOfVat * 0.01;
                                            var rrAmountNetOfEWT = rrAmount - ewt;
                                            totalNetOfEWT += rrAmountNetOfEWT;
                                            totalEWT += ewt;
                                        } else {
                                            var rrAmount = parseFloat(input.value);
                                            totalNetOfEWT += rrAmount;
                                        }
                                    });
                                    $(".totalNetOfEWT").val(totalNetOfEWT.toFixed(2));
                                    $(".totalEWT").val(totalEWT.toFixed(2));
                                    updateTotalDebitAndCredit();
                                }

                                $("#rrSelect").trigger("change");
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching TaxType:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $(".EWTDebit, .EWTCredit").hide();
                    $("#supplierAddress").val("");
                    $("#supplierTinNo").val("");
                    $(".supplierName").val("");
                }
            }
            $(".supplier, .checkVoucher").change(handleSupplierChange);
        });
    </script>
    <script>
        $(function automaticEntry() {
            $(".automaticEntry").change(function () {
                var coaNo = $(this).val(); // Get all selected POIds
                if (coaNo && coaNo.length > 0) {
                    if (coaNo.includes("10201") || coaNo.includes("10105")) {
                        $("#AddAccEntry").modal("hide");
                        Swal.fire({
                            title: 'Automatic JV Entry',
                            html:
                                    'Do you want to automatic insert JV entry records based on CV?<br/><br/>' +
                                'When to start? <br/><input id="startDate" type="month" class="form-control">' +
                                'When to end? <br/><input id="endDate" type="month" class="form-control">',
                            allowOutsideClick: false, // Prevent closing on outside click
                            allowEscapeKey: false,  // Prevent closing with Esc key
                            showCancelButton: true,
                            confirmButtonText: "Yes, confirm!",
                            cancelButtonText: "No, N/A!",
                        }).then((result) => {
                            if (result.isConfirmed) {
                                    const startDate = document.getElementById('startDate').value;
                                    const endDate = document.getElementById('endDate').value;
                                    $("#AddAccEntry").modal("show");
                                if (startDate !== null && endDate !== null) {
                                    var form = document.getElementById("myform");

                                    form.appendChild(createHiddenInput("startDate", startDate));
                                    form.appendChild(createHiddenInput("endDate", endDate));
                                } else {
                                    console.error('Invalid');
                                }
                            } else {
                                console.log('User canceled');
                                $("#AddAccEntry").modal("show");
                            }
                        });
                    }
                } else {

                }
            });
        });

        //for including input value in form
        function createHiddenInput(name, value) {
            var input = document.createElement("input");
            input.type = "hidden";
            input.name = name;
            input.value = value;
            return input;
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#bankAccounts').change(function () {
                var bankId = $(this).val();
                $.ajax({
                    url: "/CheckVoucher/GetBankAccount",
                    method: "GET",
                    data: { bankId : bankId },
                    success: function (data) {
                        $("#accountNoAndTitle").val(data.accountNoCOA + " Cash in Bank" + " - " + data.accountNo + " " + data.accountName);
                    },
                    error: function () {
                        console.error('Error fetching bank account:', error)
                    }

                });
            });
        });
    </script>
}