@model IEnumerable<CollectionReceipt>
@using Accounting_System.Models.AccountsReceivable
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Collection Receipt";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var model = new CollectionReceipt();
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">COLLECTION RECEIPT</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
        </div>
        <table class="table table-bordered table-hover" id="collectionReceiptTable">
            <thead class="table-secondary">
                <tr class="text-nowrap">
                    <th>CR No.</th>
                    <th>@Html.DisplayNameFor(model => model.TransactionDate)</th>
                    <th>Invoice No.</th>
                    <th>@Html.DisplayNameFor(model => model.Customers)</th>
                    <th>@Html.DisplayNameFor(model => model.Total)</th>
                    <th>@Html.DisplayNameFor(model => model.CreatedBy)</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            $('#collectionReceiptTable').DataTable({
                "processing": true,
                "serverSide": true,
                "stateSave": true,
                "ajax": {
                    "url": "@Url.Action("GetCollectionReceipts", "Receipt")",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    "dataSrc": function (json) {
                        console.log(json); // Log the returned data to the console
                        return json.data; // Return the data to populate the DataTable
                    }
                },
                "columns": [
                    { "data": "crNo" },
                    {
                        "data": "transactionDate",
                        "name": "transactionDate",
                        "render": function (data, type, row) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                        }
                    },
                    {
                        "data": "id",
                        "render": function (data, type, row) {
                            if (row.salesInvoiceId != null) {
                                return row.siNo;
                            } else if (row.multipleSIId != null && Array.isArray(row.multipleSIId)) {
                                return row.multipleSI.map(function (si) {
                                    return si;
                                }).join(", "); // Concatenate multiple siNo values with a comma
                            } else {
                                return row.svNo;
                            }
                        }
                    },
                    { "data": "customer.name" },
                    { "data": "total", "render": $.fn.dataTable.render.number(',', '.', 4) },
                    { "data": "createdBy" },
                    {
                        "data": "null",
                        "render": function (data, type, row) {
                            var status = row.isPosted && !row.isVoided && !row.isCanceled
                                ? "Posted"
                                : row.isVoided
                                    ? "Voided"
                                    : row.isCanceled
                                        ? "Cancelled"
                                        : "Pending";

                            var statusClass = status == "Posted" ? "bg-info" :
                                status == "Voided" ? "bg-danger" :
                                    status == "Cancelled" ? "bg-warning" : "";

                            return `<span class="badge rounded-pill ${statusClass}">${status}</span>`;
                        }     
                    },
                    {
                        "data": null,
                        "orderable": false,
                        "render": function (data, type, row) {
                            let dropdownHtml = `
                                            <div class="dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                                <button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                    Actions
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown">`;

                            if (row.postedBy == null) {
                                if (row.multipleSIId != null) {
                                    dropdownHtml += `
                                                <li><a href="@Url.Action("MultipleCollectionEdit", "Receipt")/${row.id}" class="dropdown-item">Edit</a></li>
                                                <li><a href="@Url.Action("MultipleCollectionPrint", "Receipt")/${row.id}" class="dropdown-item">Preview</a></li>`;
                                } else {
                                    dropdownHtml += `
                                                <li><a href="@Url.Action("CollectionEdit", "Receipt")/${row.id}" class="dropdown-item">Edit</a></li>
                                                <li><a href="@Url.Action("CollectionPrint", "Receipt")/${row.id}" class="dropdown-item">Preview</a></li>`;
                                }
                                dropdownHtml += `<li><a class="dropdown-item" onclick="confirmCancel(${row.id})">Cancel</a></li>`;
                            } else {
                                if (row.multipleSIId != null) {
                                    dropdownHtml += `
                                                <li><a href="@Url.Action("MultipleCollectionPrint", "Receipt")/${row.id}" class="dropdown-item">Print</a></li>`;
                                } else {
                                    dropdownHtml += `
                                                <li><a href="@Url.Action("CollectionPrint", "Receipt")/${row.id}" class="dropdown-item">Print</a></li>`;
                                }
                                dropdownHtml += `<li><a class="dropdown-item" onclick="confirmVoid(${row.id})">Void</a></li>`;
                            }

                            dropdownHtml += `</ul></div>`;
                            return dropdownHtml;
                        }
                    }

                ],

                "order": [[1, "asc"]],
                "pageLength": 10 // Default number of rows per page
            });
        });

    </script>
    <script>
        function confirmVoid(itemId) {
            console.log(itemId);
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `/Receipt/Void?itemId=${itemId}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(itemId) {
            console.log(itemId);
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `/Receipt/Cancel?itemId=${itemId}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
}
