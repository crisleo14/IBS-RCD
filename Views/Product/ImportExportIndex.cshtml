@using Accounting_System.Models.MasterFile
@model IEnumerable<Product>

@{
    ViewData["Title"] = "Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/indexLayout.css" asp-append-version="true" />

<div class="loader-container">
    <div class="loader"></div>
    <div class="loader-text">Loading...</div>
</div>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">PRODUCT MASTER FILE</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
                <form asp-action="Import" method="post" enctype="multipart/form-data">
                    <div class="row">
                        <div class="col"><input class="form-control form-control-sm" name="file" type='file' required></div>
                        <div class="col"><button type="submit" class="btn btn-primary">Upload</button></div>
                    </div>
                </form>
            </div>
            <div class="col-6 text-end">
                <p>
                    <button type="button" class="btn btn-primary" onclick="exportToCsv()">Export Selected to CSV</button>
                </p>
            </div>
        </div>

        <table class="table table-bordered table-hover" id="dataTable">
            <thead class="table-secondary">
            <tr>
                <th data-orderable="false">
                    <input type="checkbox" class="text-center" id="selectAll" onclick="toggleSelectAll(this)">
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProductCode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProductUnit)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedDate)
                </th>
            </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <input type="checkbox" class="selectCheckbox text-center" value="@item.ProductId">
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProductCode)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProductName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProductUnit)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreatedBy)
                        </td>
                        <td>
                            @item.CreatedDate.ToString("MM/dd/yyyy")
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        let selectedRecords = new Set(); // To track selected record IDs
        let allRecordsSelected = false;  // Flag to check if "Select All" is toggled across all pages
        function toggleSelectAll(selectAllCheckbox) {
            const checkboxes = document.querySelectorAll('.selectCheckbox');
            if (selectAllCheckbox.checked) {
                // Select all visible checkboxes and mark all records as selected
                checkboxes.forEach(checkbox => {
                    checkbox.checked = true;
                    selectedRecords.add(checkbox.value);
                });
                allRecordsSelected = true;
            } else {
                // Unselect all visible checkboxes and mark all records as unselected
                checkboxes.forEach(checkbox => {
                    checkbox.checked = false;
                    selectedRecords.clear();  // Clear the set
                });
                allRecordsSelected = false;
            }
        }
        // Update selectedRecords when individual checkboxes are toggled
        document.addEventListener('change', function (e) {
            if (e.target && e.target.classList.contains('selectCheckbox')) {
                if (e.target.checked) {
                    selectedRecords.add(e.target.value);
                } else {
                    selectedRecords.delete(e.target.value);
                }
            }
        });
        function exportToCsv() {
            let selectedIds = '';
            if (allRecordsSelected) {
                // Optionally make an AJAX call to get all IDs if "Select All" was selected
                // Example of a call:
                fetch('@Url.Action("GetAllProductIds", "Product")')
                    .then(response => response.json())
                    .then(data => {
                        selectedIds = data.join(',');
                        submitForm(selectedIds);
                    })
                    .catch(error => console.error('Error:', error));
            } else {
                // Only get IDs from selected checkboxes in current set
                selectedIds = Array.from(selectedRecords).join(',');
                if (selectedIds) {
                    submitForm(selectedIds);
                } else {
                    alert('No Product selected.');
                }
            }
        }
        function submitForm(selectedIds) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("Export", "Product")';
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'selectedRecord';
            input.value = selectedIds;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        }
    </script>
}
