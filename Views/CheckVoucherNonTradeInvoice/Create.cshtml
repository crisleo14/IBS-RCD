@model Accounting_System.Models.ViewModels.CheckVoucherNonTradeInvoicingViewModel

@{
    ViewBag.Title = "Check Voucher Non-Trade Invoice";
    Layout = "_Layout";
}
<div class="loader-container">
    <div class="loader"></div>
    <div class="loader-text">Loading...</div>
</div>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Create Non-Trade Invoice</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data" id="form">
            <div class="row">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group mb-3">
                    <label asp-for="TransactionDate" class="control-label"></label><span class="required">*</span>
                    <input asp-for="TransactionDate" type="Date" class="form-control" value="@DateTime.UtcNow.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="TransactionDate" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Supplier<span class="required">*</span></label>
                    <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 supplier" style="width:100%" required>
                        <option></option>
                    </select>
                    <span asp-validation-for="SupplierId" class="text-danger"></span>
                </div>
                <input asp-for="SupplierName" type="hidden" />
                <div class="form-floating mb-3">
                    <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierAddress" class="control-label ms-2"></label>
                    <span asp-validation-for="SupplierAddress" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierTinNo" class="control-label ms-2"></label>
                    <span asp-validation-for="SupplierTinNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="PoNo" class="form-control" placeholder="Input si no" style="height: 100px"></textarea>
                    <label asp-for="PoNo" class="control-label ms-2">PO No</label>
                    <span asp-validation-for="PoNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="SiNo" class="form-control" placeholder="Input po no" style="height: 100px"></textarea>
                    <label asp-for="SiNo" class="control-label ms-2">Supplier Invoice No</label>
                    <span asp-validation-for="SiNo" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Total" class="control-label"></label><span class="required">*</span>
                    <input asp-for="Total" class="form-control inputAmount" value="" placeholder="0.000" />
                    <span asp-validation-for="Total" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Upload File (Optional)</label>
                    <input name="file" type="file" class="form-control" />
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="Particulars" class="form-control" placeholder="Leave a remarks here" style="height: 100px"></textarea>
                    <label asp-for="Particulars" class="control-label ms-2">Particulars<span class="required">*</span></label>
                    <span asp-validation-for="Particulars" class="text-danger"></span>
                </div>
                <input type="hidden" id="StartDate" name="StartDate" />
                <input type="hidden" id="NumberOfYears" name="NumberOfYears" value="0" />
                <div class="container my-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Accounting Entries</h5>
                        </div>
                        <div class="card-body">
                            <table id="accountTable" class="table table-striped table-hover align-middle">
                                <thead class="table-light">
                                <tr>
                                    <th>Account</th>
                                    <th>Gross Amount</th>
                                    <th>Vatable</th>
                                    <th>EWT</th>
                                    <th>VAT Amount</th>
                                    <th>EWT Amount</th>
                                    <th>Net of VAT</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td>
                                        <select asp-for="AccountingEntries![0].AccountTitle"
                                                class="form-select form-select-sm chart-of-accounts default-expense js-select2 w-100"
                                                style="width: 100%" required>
                                            <option value="">-- Select Account --</option>
                                            @foreach (var account in Model.ChartOfAccounts!)
                                            {
                                                <option value="@account.Value">@account.Text</option>
                                            }
                                        </select>
                                        <span asp-validation-for="AccountingEntries![0].AccountTitle" class="text-danger"></span>
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries![0].Amount" class="form-control form-control-sm text-end amount" value="0" />
                                    </td>
                                    <td class="text-center">
                                        <input type="checkbox" asp-for="AccountingEntries![0].Vatable" class="form-check-input vatable default-vatable" />
                                    </td>
                                    <td>
                                        <select asp-for="AccountingEntries![0].TaxPercentage" class="form-select form-select-sm taxable">
                                            <option value="0">0%</option>
                                            <option value="0.01">1%</option>
                                            <option value="0.02">2%</option>
                                            <option value="0.05">5%</option>
                                            <option value="0.1">10%</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries![0].VatAmount" class="form-control form-control-sm text-end vat-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries![0].TaxAmount" class="form-control form-control-sm text-end tax-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries![0].NetOfVatAmount" class="form-control form-control-sm text-end net-of-vat" readonly />
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm" disabled>
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-end">
                                <button id="addRow" type="button" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-plus-circle"></i> Add Row
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="d-flex justify-content-end mt-3">
                        <button id="submitButton" class="btn btn-success me-2" type="submit">
                            <i class="bi bi-check-circle"></i> Submit
                        </button>
                        <a asp-controller="CheckVoucherNonTradeInvoice" asp-action="Index"
                           class="btn btn-outline-primary d-flex align-items-center">
                            <i class="bi bi-arrow-left-circle me-2"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $("#AccountNo").change(function () {
            let accountNumber = $(this).val();
            if (accountNumber.startsWith("10201") || accountNumber.startsWith("10105")) {
                // Close the modal
                $("#AddAccEntry").modal("hide");
                Swal.fire({
                    title: "Create Automatic Journal Entry",
                    text: "Do you want to create an automatic journal entry?",
                    icon: "question",
                    showCancelButton: true,
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    confirmButtonText: "Yes",
                    cancelButtonText: "No",
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return new Promise((resolve) => {
                            Swal.fire({
                                title: "Input Start Date and Number of Years",
                                html:
                                    "<input id='start-date' type='date' class='swal2-input' placeholder='Start Date'>" +
                                    "<input id='num-years' type='number' class='swal2-input' placeholder='Number of Years'>",
                                focusConfirm: false,
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                preConfirm: () => {
                                    return [
                                        $("#start-date").val(),
                                        $("#num-years").val()
                                    ];
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    resolve(result.value);
                                }
                            });
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Result contains an array with the start date and number of years
                        let startDate = result.value[0];
                        let numYears = result.value[1];
                        // Assign the values to hidden inputs in your form
                        $("#StartDate").val(startDate);
                        $("#NumberOfYears").val(numYears);
                        // Close the modal
                        $("#AddAccEntry").modal("show");
                    }
                });
            }
        });

    </script>
    <script>
        const VAT_RATE = 0.12;
        const VAT_INCLUDED_PRICE_MULTIPLIER = 1.12;
        const AP_NON_TRADE = "202010200 AP-Non Trade Payable";
        const INPUT_VAT = "101060200 Vat - Input";
        const PAYABLE_ACCOUNTS = {
            0.01: "201030210 Expanded Withholding Tax 1%",
            0.02: "201030220 Expanded Withholding Tax 2%",
            0.05: "201030230 Expanded Withholding Tax 5%",
            0.10: "201030240 Expanded Withholding Tax 10%"
        };

        // Object to store accumulated journal entries
        let accumulatedEntries = {};

        // Function to recalculate all rows
        function recalculateAllRows() {
            // Clear all accumulated entries
            accumulatedEntries = {};

            // Get all rows
            const rows = document.querySelectorAll("#accountTable tbody tr");

            // Calculate for each row
            rows.forEach(row => {
                calculateTaxAndVat(row, false); // Pass false to prevent display update until all rows are processed
            });

            // Update display once after all calculations
            displayAccumulatedEntries();

            // Reinitialize Select2 for all js-select2 dropdowns
            $('.js-select2').select2({
                placeholder: "Select an option...",
                allowClear: true,
                width: 'resolve',
                theme: 'classic'
            });
        }

        // Modified calculate function to optionally skip display update
        function calculateTaxAndVat(row, updateDisplay = true) {
            if (!row) return;

            const amountField = row.querySelector(".amount");
            const vatableField = row.querySelector(".vatable");
            const taxAmountField = row.querySelector(".tax-amount");
            const vatAmountField = row.querySelector(".vat-amount");
            const netOfVatField = row.querySelector(".net-of-vat");
            const accountField = row.querySelector(".chart-of-accounts");

            const amount = parseFloat(amountField.value) || 0;
            const taxPercentage = parseFloat(row.querySelector(".taxable").value) || 0;
            const isVatable = vatableField.checked;
            const accountTitle = accountField.options[accountField.selectedIndex]?.text || '';

            // Calculate net of VAT
            const netOfVat = isVatable ? amount / VAT_INCLUDED_PRICE_MULTIPLIER : amount;

            // Calculate tax and VAT
            const taxAmount = netOfVat * taxPercentage;
            const vatAmount = isVatable ? netOfVat * VAT_RATE : 0;
            const netOfTaxAmount = amount - taxAmount;

            // Update fields
            taxAmountField.value = taxAmount.toFixed(2);
            vatAmountField.value = vatAmount.toFixed(2);
            netOfVatField.value = netOfVat.toFixed(2);

            // Add to accumulated entries without clearing previous entries
            addToAccumulatedEntries(accountTitle, netOfVat, 0);
            if (isVatable && vatAmount > 0) {
                addToAccumulatedEntries(INPUT_VAT, vatAmount, 0);
            }

            addToAccumulatedEntries(AP_NON_TRADE, 0, netOfTaxAmount);


            if (taxAmount > 0) {
                const payableAccount = PAYABLE_ACCOUNTS[taxPercentage];
                if (!payableAccount) {
                    console.error("Invalid tax percentage");
                    return; // Exit if the percentage is invalid
                }
                addToAccumulatedEntries(payableAccount, 0, taxAmount);
            }

            // Only update display if requested
            if (updateDisplay) {
                displayAccumulatedEntries();
            }
        }

        function addToAccumulatedEntries(account, debit, credit) {
            if (!accumulatedEntries[account]) {
                accumulatedEntries[account] = { debit: 0, credit: 0 };
            }
            accumulatedEntries[account].debit += debit;
            accumulatedEntries[account].credit += credit;
        }

        function createJournalEntriesTable() {
            const div = document.createElement("div");
            div.className = "card shadow-sm mt-4";
            div.innerHTML = `
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Generated Journal Entries</h5>
            </div>
            <div class="card-body">
                <table id="journalEntriesTable" class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Account</th>
                            <th class="text-end">Debit</th>
                            <th class="text-end">Credit</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        `;

            // Insert after the accounting entries card
            const accountingCard = document.querySelector("#accountTable").closest(".card");
            accountingCard.parentNode.insertBefore(div, accountingCard.nextSibling);

            return div.querySelector("table");
        }

        function displayAccumulatedEntries() {
            // Create or get the journal entries table
            let journalTable = document.getElementById("journalEntriesTable");
            if (!journalTable) {
                journalTable = createJournalEntriesTable();
            }

            const tbody = journalTable.querySelector("tbody");
            tbody.innerHTML = ""; // Clear existing display

            // Display all accumulated entries
            Object.entries(accumulatedEntries).forEach(([account, amounts]) => {
                if (amounts.debit > 0 || amounts.credit > 0) {
                    addJournalRow(tbody, account, amounts.debit, amounts.credit);
                }
            });

            // Add totals row
            const totalDebit = Object.values(accumulatedEntries).reduce((sum, amt) => sum + amt.debit, 0);
            const totalCredit = Object.values(accumulatedEntries).reduce((sum, amt) => sum + amt.credit, 0);

            // Add a separator row
            const separatorRow = document.createElement("tr");
            separatorRow.innerHTML = '<td colspan="3"><hr></td>';
            tbody.appendChild(separatorRow);

            // Add totals row
            const totalsRow = document.createElement("tr");
            totalsRow.innerHTML = `
            <td><strong>Totals</strong></td>
            <td class="text-end"><strong>${totalDebit.toFixed(2)}</strong></td>
            <td class="text-end"><strong>${totalCredit.toFixed(2)}</strong></td>
        `;
            tbody.appendChild(totalsRow);
        }

        function addJournalRow(tbody, account, debit, credit) {
            const row = document.createElement("tr");
            row.innerHTML = `
            <td>${account}</td>
            <td class="text-end">${debit > 0 ? debit.toFixed(2) : ""}</td>
            <td class="text-end">${credit > 0 ? credit.toFixed(2) : ""}</td>
        `;
            tbody.appendChild(row);
        }

        // Event handler for removing a row
        function handleRowRemoval(row) {
            row.remove();
            recalculateAllRows();
        }

        // Event delegation to handle input and change events for the table
        document.getElementById("accountTable").addEventListener("input", debounce((event) => {
            const row = event.target.closest("tr");
            if (row && (event.target.classList.contains("amount") ||
                event.target.classList.contains("vatable") ||
                event.target.classList.contains("taxable"))) {
                recalculateAllRows();
            }
        }, 300));

        document.getElementById("addRow").addEventListener("click", () => {
            const tableBody = document.querySelector("#accountTable tbody");
            const rowCount = tableBody.rows.length;

            const newRowHTML = `
            <tr>
                <td class="px-2">
                    <select name="AccountingEntries[${rowCount}].AccountTitle" class="form-select form-select-sm chart-of-accounts js-select2" style="width: 100%" required>
                        ${document.querySelector(".chart-of-accounts").innerHTML}
                    </select>
                    <input type="hidden" name="AccountingEntries[${rowCount}].BankMasterFileId" class="bank-master-file-id" />
                </td>
                <td class="px-2">
                    <input type="number" name="AccountingEntries[${rowCount}].Amount" class="form-control form-control-sm text-end amount" value="0" />
                </td>
                <td class="text-center px-2">
                    <input type="checkbox" name="AccountingEntries[${rowCount}].Vatable" class="form-check-input vatable" value="false" />
                </td>
                <td class="px-2">
                    <select name="AccountingEntries[${rowCount}].TaxPercentage" class="form-select form-select-sm taxable" required>
                        <option value="0" selected>0%</option>
                        <option value="0.01">1%</option>
                        <option value="0.02">2%</option>
                        <option value="0.05">5%</option>
                        <option value="0.1">10%</option>
                    </select>
                </td>
                <td class="px-2">
                    <input type="number" name="AccountingEntries[${rowCount}].VatAmount" class="form-control form-control-sm text-end vat-amount" readonly />
                </td>
                <td class="px-2">
                    <input type="number" name="AccountingEntries[${rowCount}].TaxAmount" class="form-control form-control-sm text-end tax-amount" readonly />
                </td>
                <td class="px-2">
                    <input type="number" name="AccountingEntries[${rowCount}].NetOfVatAmount" class="form-control form-control-sm text-end net-of-vat" readonly />
                </td>
                <td class="text-center px-2">
                    <button type="button" class="btn btn-sm btn-danger removeRow">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        `;

            // Add the new row to the table
            tableBody.insertAdjacentHTML("beforeend", newRowHTML);

            // Reinitialize Select2 for all js-select2 dropdowns
            $('.js-select2').select2({
                placeholder: "Select an option...",
                allowClear: true,
                width: 'resolve',
                theme: 'classic'
            });

            // Attach remove functionality
            const newRow = tableBody.lastElementChild;
            newRow.querySelector(".removeRow").addEventListener("click", function() {
                handleRowRemoval(newRow);
            });

            // Recalculate all rows after adding new row
            recalculateAllRows();
        });

        let supplier = $('.supplier');
        $(document).ready(function () {
            // Attach event listener to the select field
            supplier.on('change', function () {
                let supplierId = $(this).val();

                fetchSupplierDetails(supplierId, function (data) {
                    $("#SupplierName").val(data.name);
                    $("#SupplierAddress").val(data.address);
                    $("#SupplierTinNo").val(data.tinNo);
                    $(".default-expense").val(data.defaultExpense).change();
                    const taxDropdown = $(".default-tax-percentage");
                    taxDropdown.val(data.taxPercent).change();
                    const row = taxDropdown.closest("tr")[0];
                    calculateTaxAndVat(row);
                    const vatableCheckbox = $(".default-vatable");
                    vatableCheckbox.prop("checked", data.vatable);
                    if (data.vatable) {
                        const row = vatableCheckbox.closest("tr")[0];
                        calculateTaxAndVat(row);
                    }
                });
            });

            supplier.each(function () {
                let supplierId = $(this).val();
                if (supplierId) {
                    fetchSupplierDetails(supplierId, function (data) {
                        $(this).closest('.form-group').find('.supplier-address').val(data.address);
                        $(this).closest('.form-group').find('.supplier-phone').val(data.phone);
                    });
                }
            });

            // Initialize journal entries for the first row on page load
            const firstRow = document.querySelector("#accountTable tbody tr");
            if (firstRow) {
                calculateTaxAndVat(firstRow);
            }

            // Initialize Select2
            $('.js-select2').select2({
                placeholder: "Select an option...",
                allowClear: true,
                width: 'resolve',
                theme: 'classic'
            });
        });

        function fetchSupplierDetails(supplierId, onSuccessCallback) {
            if (!supplierId) {
                console.error('Supplier ID is required');
                return;
            }

            // Make AJAX call to get supplier details
            $.ajax({
                url: '@Url.Action("GetSupplierDetails", "CheckVoucherNonTradeInvoice")',
                type: 'GET',
                data: { supplierId: supplierId },   // Send the selected supplier ID
                success: function (data) {
                    // Call the provided callback with the supplier details
                    if (data && typeof onSuccessCallback === 'function') {
                        onSuccessCallback(data);
                    }
                },
                error: function () {
                    // Handle any errors
                    alert('Error fetching supplier details');
                }
            });
        }

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }

        // Add this function to validate totals before form submission
        function validateTotals() {
            // Get the total amount from the form
            const totalAmount = parseFloat(document.querySelector('[name="Total"]').value) || 0;

            // Get journal entry totals
            const totalDebit = Object.values(accumulatedEntries).reduce((sum, amt) => sum + amt.debit, 0);
            const totalCredit = Object.values(accumulatedEntries).reduce((sum, amt) => sum + amt.credit, 0);

            // Check if total amount is zero
            if (totalAmount <= 0) {
                Swal.fire({
                    title: 'Validation Error',
                    text: 'Total amount must be greater than zero.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            // Check if debits equal credits
            if (Math.abs(totalDebit - totalCredit) > 0.01) { // Using 0.01 to account for rounding differences
                Swal.fire({
                    title: 'Validation Error',
                    text: 'Debit and Credit totals must be equal.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            // Check if accounting entries match total amount
            if (Math.abs(totalAmount - totalDebit) > 0.01) {
                Swal.fire({
                    title: 'Validation Error',
                    text: 'Total amount must match the sum of accounting entries.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            return true;
        }

        // Add this to your document ready function or existing script
        document.getElementById('form').addEventListener('submit', function(e) {
            e.preventDefault();

            if (validateTotals()) {
                this.submit();
            }
        });
    </script>
}