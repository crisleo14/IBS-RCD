@using Accounting_System.Models.ViewModels
@model IEnumerable<ChartOfAccountSummary>
@{
    ViewData["Title"] = "Chart of Accounts Summary";
    decimal totalDebit = 0m;
    decimal totalCredit = 0m;
    decimal totalBalance = totalDebit - totalCredit;
}

<h2><b>Trial Balance</b></h2>

<table class="table">
    <thead>
        <tr>
            <th>Account Title</th>
            <th>Debit</th>
            <th>Credit</th>
            <th>Balance</th>
        </tr>
    </thead>
    <tbody style="cursor: pointer">
        @foreach (var firstLevel in Model)
        {
            <tr class="parent-account table-dark" onclick="toggleSubAccount(this)" title="Click to expand/collapse">
                <td>
                    <span class="account-name">
                        @firstLevel.AccountNumber - @firstLevel.AccountName
                    </span>
                </td>
                <td>@firstLevel.Debit.ToString("N2")</td>
                <td>@firstLevel.Credit.ToString("N2")</td>
                <td>@firstLevel.Balance.ToString("N2")</td>
            </tr>
            totalDebit += firstLevel.Debit;
            totalCredit += firstLevel.Credit;
            @if (firstLevel.Children.Any(x => x.Debit != 0 || x.Credit != 0))
            {
                foreach (var secondLevel in firstLevel.Children.Where(x => x.Debit != 0 || x.Credit != 0))
                {
                    <tr class="second-level" style="display: none;" onclick="toggleSubAccount(this)" title="Click to expand/collapse">
                        <td style="padding-left: 20px;">
                            <span class="account-name">
                                <i class="bi bi-arrow-return-right"></i> @secondLevel.AccountNumber - @secondLevel.AccountName
                            </span>
                        </td>
                        <td>@secondLevel.Debit.ToString("N2")</td>
                        <td>@secondLevel.Credit.ToString("N2")</td>
                        <td>@secondLevel.Balance.ToString("N2")</td>
                    </tr>
                    if (secondLevel.Children.Any(x => x.Debit != 0 || x.Credit != 0))
                    {
                        foreach (var thirdLevel in secondLevel.Children.Where(x => x.Debit != 0 || x.Credit != 0))
                        {
                            <tr class="third-level" style="display: none;" onclick="toggleSubAccount(this)" title="Click to expand/collapse">
                                <td style="padding-left: 40px;">
                                    <span class="account-name">
                                        <i class="bi bi-arrow-return-right"></i> @thirdLevel.AccountNumber - @thirdLevel.AccountName
                                    </span>
                                </td>
                                <td>@thirdLevel.Debit.ToString("N2")</td>
                                <td>@thirdLevel.Credit.ToString("N2")</td>
                                <td>@thirdLevel.Balance.ToString("N2")</td>
                            </tr>
                            if (thirdLevel.Children.Any(x => x.Debit != 0 || x.Credit != 0))
                            {
                                foreach (var fourthLevel in thirdLevel.Children.Where(x => x.Debit != 0 || x.Credit != 0))
                                {
                                    <tr class="fourth-level" style="display: none;" onclick="toggleSubAccount(this)" title="Click to expand/collapse">
                                        <td style="padding-left: 60px;">
                                            <span class="account-name">
                                                <i class="bi bi-arrow-return-right"></i> @fourthLevel.AccountNumber - @fourthLevel.AccountName
                                            </span>
                                        </td>
                                        <td>@fourthLevel.Debit.ToString("N2")</td>
                                        <td>@fourthLevel.Credit.ToString("N2")</td>
                                        <td>@fourthLevel.Balance.ToString("N2")</td>
                                    </tr>
                                    if (fourthLevel.Children.Any(x => x.Debit != 0 || x.Credit != 0))
                                    {
                                        foreach (var fifthLevel in fourthLevel.Children.Where(x => x.Debit != 0 || x.Credit != 0))
                                        {
                                            <tr class="fifth-level" style="display: none;" title="Click to expand/collapse">
                                                <td style="padding-left: 80px;">
                                                    <span class="account-name">
                                                        <i class="bi bi-arrow-return-right"></i> @fifthLevel.AccountNumber - @fifthLevel.AccountName
                                                    </span>
                                                </td>
                                                <td>@fifthLevel.Debit.ToString("N2")</td>
                                                <td>@fifthLevel.Credit.ToString("N2")</td>
                                                <td>@fifthLevel.Balance.ToString("N2")</td>
                                            </tr>
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        <tr class="parent-account table-dark">
            <td class="text-end">Grand Total:</td>
            <td>@totalDebit.ToString("N2")</td>
            <td>@totalCredit.ToString("N2")</td>
            <td>@totalBalance.ToString("N2")</td>
        </tr>
    </tbody>
</table>

@section Scripts {
    <script>
        function toggleSubAccount(element) {
            const row = element.closest('tr');
            const nextRows = row.nextElementSibling;
            let childRows;
            if (nextRows.classList.contains('second-level')) {
                childRows = row.parentNode.querySelectorAll('.' + row.classList[0] + ' ~ .second-level');
            }
            else if (nextRows.classList.contains('third-level')) {
                childRows = row.parentNode.querySelectorAll('.' + row.classList[0] + ' ~ .third-level');
            }
            else if (nextRows.classList.contains('fourth-level')) {
                childRows = row.parentNode.querySelectorAll('.' + row.classList[0] + ' ~ .fourth-level');
            }
            else {
                childRows = row.parentNode.querySelectorAll('.' + row.classList[0] + ' ~ .fifth-level');
            }
            childRows.forEach(childRow => {
                childRow.style.display = childRow.style.display === 'none' ? 'table-row' : 'none';
            });
        }
    </script>
}
