@model IEnumerable<JournalBook>
@using Accounting_System.Models.Reports
@using Microsoft.AspNetCore.Identity
@using Accounting_System.Utility
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Journal Book";
    var dateFrom = ViewBag.DateFrom;
    var dateTo = ViewBag.DateTo;
    var lastRecord = ViewBag.LastRecord;

    decimal totalCreditAmount = 0;
    decimal totalDebitAmount = 0;

    int numberOfRecords = 0;
    decimal amountFieldControlTotal = 0;
}
<style>
    body {
        margin: 0 100px 0 0;
        padding: 0;
    }

    .container {
        margin: 0;
        padding: 0;
        max-width: 100%;
    }

    main {
        margin: 0;
        padding: 0;
    }

    footer {
        display: none;
        visibility: hidden;
    }
</style>
<br class="br-top" />
<div class="mx-5">
<pre>
TAXPAYER'S NAME: Filpride Resources Inc.
TIN: 000-216-589-00000
ADDRESS: 57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone, Kalaklan, Olongapo City, 2200 Zambales, Philippines

Accounting System: Accounting Administration System
Acknowledgement Certificate Control No.: @CS.ACCN
Date Issued: @CS.DateIssued
</pre>

<pre id="resultPre">
Accounting Books File Attributes/Layout Definition
File Name: Journal Book Report
File Type: Text File
Number of Records:                  @numberOfRecords
Amount Field Control Total:         @amountFieldControlTotal
Period Covered:                     @dateFrom to @dateTo
Transaction cut-off Date & Time:    @lastRecord
Extracted By:                       @UserManager.GetUserName(User)!.ToUpper()

</pre>

<h3><b>JOURNAL BOOK</b></h3>
    <table class="table-hover w-100" style="margin-top:20px;">
        <thead>
            <tr class="table-bordered">
                <th style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.Date)
                </th>
                <th style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.Reference)
                </th>
                <th style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.AccountTitle)
                </th>
                <th class="text-end" style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.Debit)
                </th>
                <th class="text-end" style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayNameFor(model => model.Credit)
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var journal in Model)
            {
                <tr class="align-text-bottom">
                    <td style="padding: 10px 30px 10px 30px;">
                        @journal.Date.ToString("MM/dd/yyyy")
                    </td>
                    <td style="padding: 10px 30px 10px 30px;">
                        @Html.DisplayFor(model => journal.Reference)
                    </td>
                    <td style="padding: 10px 30px 10px 30px;">
                        @Html.DisplayFor(model => journal.Description)
                    </td>
                    <td style="padding: 10px 30px 10px 30px;">
                        @Html.DisplayFor(model => journal.AccountTitle)
                    </td>
                    <td class="text-end" style="padding: 10px 30px 10px 30px;">
                        @Html.DisplayFor(model => journal.Debit)
                    </td>
                    <td class="text-end" style="padding: 10px 30px 10px 30px;">
                        @Html.DisplayFor(model => journal.Credit)
                    </td>

                </tr>

                totalCreditAmount += journal.Credit;
                totalDebitAmount += journal.Debit;
            }
            <tr class="align-text-bottom" style="border-top: 2px solid black;">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="text-center"><b>TOTAL:</b></td>
                    <td class="text-end" style="padding: 10px 30px 10px 30px;">@totalCreditAmount.ToString("N2")</td>
                    <td class="text-end" style="padding: 10px 30px 10px 30px;"><div>@totalDebitAmount.ToString("N2")</div></td>
            </tr>
        </tbody>
    </table>

    <p style="line-height: 1; margin-top:25px;" class="text-start">
        <em>
            <b>Software Name :</b> Accounting Administration System (AAS)
            <br />
            <b>Version :</b> @CS.Version
            <br />
            <b>Printed By :</b> @UserManager.GetUserName(User)!.ToUpper()
            <br />
            <b>Date & Time Printed :</b> @DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
        </em>
    </p>

    <a class="btn btn-success" onclick="printPage()" id="printButton" style="margin-top:25px;">Print</a>
    <a asp-action="JournalBook" class="btn" id="otherButton" style="margin-top:25px;">Back</a>
</div>
@section Scripts{
    <script>
        function printPage() {
            // Call the print function
            window.print();
        }
    </script>
    <script>
        // Get the first row in the table body
        let firstRow = document.querySelector('tbody tr:first-child');

        // Get all cells in the first row
        let cells = firstRow.querySelectorAll('td');

        // Initialize total character count
        let totalCharacters = 0;

        // Get the pre tag element
        let resultPre = document.getElementById('resultPre');

        // Append the header for the fields
        resultPre.textContent += 'Field Name          Description         From     To     Length      Example\n';

        // Iterate through each cell in the first row
        cells.forEach(function (cell, index) {
            // Calculate the starting and ending character positions for each cell
            let cellHtml = cell.innerHTML;

            // Exclude spaces from both 'START' and 'END' counts
            let startChar = totalCharacters + 1;
            let endChar = startChar + cellHtml.replace(/\s/g, '').length - 1;

            // Update the total character count
            totalCharacters = endChar + 1; // Add 1 to include the space in the next cell

            let content = cellHtml.trim();

            // Append the result to the pre tag based on the row index
            switch (index) {
                case 0: // Transaction Date
                    resultPre.textContent += padToLength('Date', 20) +
                        padToLength('Date', 20) +
                        padToLength("1", 9) +
                        padToLength("10", 7) +
                        padToLength("10", 12) +
                        content + '\n';
                    break;
                case 1: // Serial No
                    resultPre.textContent += padToLength('Reference', 20) +
                        padToLength('Reference', 20) +
                        padToLength("12", 9) +
                        padToLength("23", 7) +
                        padToLength("12", 12) +
                        content + '\n';
                    break;
                case 2: // Sold To
                    resultPre.textContent += padToLength('Description', 20) +
                        padToLength('Description', 20) +
                        padToLength('25', 9) +
                        padToLength('224', 7) +
                        padToLength('200', 12) +
                        content + '\n';
                    break;
                case 3: // Tin#
                    resultPre.textContent += padToLength('AccountTitle', 20) +
                        padToLength('Account Title', 20) +
                        padToLength('226', 9) +
                        padToLength('275', 7) +
                        padToLength('50', 12) +
                        content + '\n';
                    break;
                case 4: // Amount
                    resultPre.textContent += padToLength('Debit', 20) +
                        padToLength('Debit', 20) +
                        padToLength('277', 9) +
                        padToLength('294', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
                case 5: // Vat Amount
                    resultPre.textContent += padToLength('Credit', 20) +
                        padToLength('Credit', 20) +
                        padToLength('296', 9) +
                        padToLength('313', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
            }
        });

        // Function to pad a string to a specific length
        function padToLength(str, length) {
            return str + ' '.repeat(Math.max(0, length - str.length));
        }
    </script>

    <script>
        // Get all <tr> elements in the table body (excluding the header row)
        let allTrElements = document.querySelectorAll('tbody tr');

        // Get the pre tag element
        let resultPre = document.getElementById('resultPre');

        // Replace the placeholder in the HTML with the actual number of records
        resultPre.innerHTML = resultPre.innerHTML.replace('@numberOfRecords', (allTrElements.length - 1));
        resultPre.innerHTML = resultPre.innerHTML.replace('@amountFieldControlTotal', "@totalDebitAmount.ToString("N2")");

    </script>


}