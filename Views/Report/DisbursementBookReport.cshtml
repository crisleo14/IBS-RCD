@model IEnumerable<Accounting_System.Models.DisbursementBook>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Disbursement Book";
    var dateFrom = ViewBag.DateFrom;
    var dateTo = ViewBag.DateTo;
    var lastRecord = ViewBag.LastRecord;

    // Convert the date strings to DateTime objects
    DateTime dateFromFormatted;
    if (DateTime.TryParse(dateFrom, out dateFromFormatted))
    {
        // Format the DateTime objects in the desired format
        dateFrom = dateFromFormatted.ToString("MM/dd/yyyy");
    }

    DateTime dateToFormatted;
    if (DateTime.TryParse(dateTo, out dateToFormatted))
    {
        // Format the DateTime objects in the desired format
        dateTo = dateToFormatted.ToString("MM/dd/yyyy");
    }
    DateTime now = DateTime.Now;

    decimal totalDebitAmount = 0;
    decimal totalCreditAmount = 0;

    int numberOfRecords = 0;
    decimal amountFieldControlTotal = 0;
}

<br />
<div>
    <pre>
TAXPAYER'S NAME: Filpride Resources Inc.
TIN: 000-216-589-00000
ADDRESS: 57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone, Kalaklan, Olongapo City, 2200 Zambales, Philippines

Accounting System: Accounting Administration System
Acknowledgement Certificate Control No.:
Date Issued:</pre>
    <pre id="resultPre">
Accounting Books File Attributes/Layout Definition
File Name: Disbursement Book Report
File Type: Text File
Number of Records:                  @numberOfRecords
Amount Field Control Total:         @amountFieldControlTotal
Period Covered:                     @dateFrom to @dateTo
Transaction cut-off Date & Time:    @lastRecord
Extracted By:                       @UserManager.GetUserName(User).ToUpper()

</pre>
</div>
<h3><span style="display: inline-block;"><b>DISBURSEMENT BOOK</b></span></h3>
<div class="table-responsive" style="margin-top:20px;">
    <table class="table-hover w-100">
        <thead>
            <tr class="table-bordered">
                <th>
                    @Html.DisplayNameFor(model => model.Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CVNo)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Payee)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Particulars)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Bank)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CheckNo)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CheckDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ChartOfAccount)
                </th>
                <th class="text-end">
                    @Html.DisplayNameFor(model => model.Debit)
                </th>
                <th class="text-end">
                    @Html.DisplayNameFor(model => model.Credit)
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var disbursement in Model)
            {
                <tr class="align-text-bottom">
                    <td>
                        @Html.DisplayFor(model => disbursement.Date)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.CVNo)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.Payee)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.Particulars)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.Bank)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.CheckNo)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.CheckDate)
                    </td>
                    <td>
                        @Html.DisplayFor(model => disbursement.ChartOfAccount)
                    </td>
                    <td class="text-end">
                        @Html.DisplayFor(model => disbursement.Debit)
                    </td>
                    <td class="text-end">
                        @Html.DisplayFor(model => disbursement.Credit)
                    </td>

                </tr>

                totalDebitAmount += disbursement.Debit;
                totalCreditAmount += disbursement.Credit;
            }
            <tr class="align-text-bottom" style="border-top: 2px solid black;">
                @{
                    var formattedTotalDebitAmount = String.Format("{0:n}", totalDebitAmount);
                    var formattedTotalCreditAmount = String.Format("{0:n}", totalCreditAmount);

                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="text-center"><b>TOTAL:</b></td>
                    <td class="text-end"><div>@formattedTotalDebitAmount</div></td>
                    <td class="text-end"><div>@formattedTotalCreditAmount</div></td>
                }
            </tr>
        </tbody>
    </table>
</div>

<div class="text-start" style="margin-top:10px;">
    <p style="line-height: 1;">
        <em>
            <strong>Software Name :</strong> Accounting Administration System (AAS)
            <br />
            <strong>Version :</strong> v1.0
            <br />
            <strong>Printed By :</strong> @UserManager.GetUserName(User).ToUpper()
            <br />
            <strong>Date & Time Printed :</strong> @DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
        </em>
    </p>
</div>

<div>
    <a class="btn btn-success" onclick="printPage()" id="printButton">Print</a>
    <a asp-action="DisbursementBook" class="btn" id="otherButton">Back</a>
</div>

@section Scripts{
    <script>
        var originalFontSizes = [];
        function printPage() {
            var printButton = document.getElementById("printButton");
            var otherButton = document.getElementById("otherButton");

            // Hide the header and footer
            document.querySelector("header").style.display = "none";
            document.querySelector("footer").style.display = "none";

            // Hide the buttons before printing
            if (printButton) {
                printButton.style.visibility = "hidden";
            }
            if (otherButton) {
                otherButton.style.visibility = "hidden";
            }

            // Get all paragraph elements
            var paragraphs = document.querySelectorAll("p");

            // Store the original font sizes
            for (var i = 0; i < paragraphs.length; i++) {
                originalFontSizes[i] = paragraphs[i].style.fontSize;
                // Set the font size of all paragraph elements to 12px for printing
                paragraphs[i].style.fontSize = "12px";
            }

            // Get all table text elements
            var mytable = document.querySelectorAll("table");

            // Store the original font sizes
            for (var i = 0; i < mytable.length; i++) {
                originalFontSizes[i] = mytable[i].style.fontSize;
                // Set the font size of all paragraph elements to 12px for printing
                mytable[i].style.fontSize = "12px";
            }

            // Call the print function
            window.print();

            // Restore the font sizes
            for (var i = 0; i < paragraphs.length; i++) {
                paragraphs[i].style.fontSize = originalFontSizes[i];
            }

            // Restore the font sizes
            for (var i = 0; i < mytable.length; i++) {
                mytable[i].style.fontSize = originalFontSizes[i];
            }

            // Restore the buttons' visibility after printing (optional)
            if (printButton) {
                printButton.style.visibility = "visible";
            }
            if (otherButton) {
                otherButton.style.visibility = "visible";
            }

            // Restore the header and footer's visibility after printing (optional)
            document.querySelector("header").style.display = "";
            document.querySelector("footer").style.display = "";
        }
    </script>
    <script>
        // Get the first row in the table body
        var firstRow = document.querySelector('tbody tr:first-child');

        // Get all cells in the first row
        var cells = firstRow.querySelectorAll('td');

        // Initialize total character count
        var totalCharacters = 0;

        // Get the pre tag element
        var resultPre = document.getElementById('resultPre');

        // Append the header for the fields
        resultPre.textContent += 'Field Name          Description         From     To     Length      Example\n';

        // Iterate through each cell in the first row
        cells.forEach(function (cell, index) {
            // Calculate the starting and ending character positions for each cell
            var cellHtml = cell.innerHTML;

            // Exclude spaces from both 'START' and 'END' counts
            var startChar = totalCharacters + 1;
            var endChar = startChar + cellHtml.replace(/\s/g, '').length - 1;

            // Update the total character count
            totalCharacters = endChar + 1; // Add 1 to include the space in the next cell

            var content = cellHtml.trim();

            // Append the result to the pre tag based on the row index
            switch (index) {
                case 0: // Transaction Date
                    resultPre.textContent += padToLength('Date', 20) +
                        padToLength('Date', 20) +
                        padToLength(startChar.toString(), 9) +
                        padToLength(endChar.toString(), 7) +
                        padToLength((endChar - startChar + 1).toString(), 12) +
                        content + '\n';
                    break;
                case 1: // Serial No
                    resultPre.textContent += padToLength('CVNo', 20) +
                        padToLength('CV No.', 20) +
                        padToLength(startChar.toString(), 9) +
                        padToLength(endChar.toString(), 7) +
                        padToLength((endChar - startChar + 1).toString(), 12) +
                        content + '\n';
                    break;
                case 2: // Sold To
                    resultPre.textContent += padToLength('Payee', 20) +
                        padToLength('Payee', 20) +
                        padToLength('25', 9) +
                        padToLength('124', 7) +
                        padToLength('100', 12) +
                        content + '\n';
                    break;
                case 3: // Tin#
                    resultPre.textContent += padToLength('Particulars', 20) +
                        padToLength('Particulars', 20) +
                        padToLength('126', 9) +
                        padToLength('325', 7) +
                        padToLength('200', 12) +
                        content + '\n';
                    break;
                case 4: // Amount
                    resultPre.textContent += padToLength('Bank', 20) +
                        padToLength('Bank', 20) +
                        padToLength('327', 9) +
                        padToLength('336', 7) +
                        padToLength('10', 12) +
                        content + '\n';
                    break;
                case 5: // Vat Amount
                    resultPre.textContent += padToLength('CheckNo', 20) +
                        padToLength('Check No', 20) +
                        padToLength('338', 9) +
                        padToLength('357', 7) +
                        padToLength('20', 12) +
                        content + '\n';
                    break;
                case 6: // Vatable Sales
                    resultPre.textContent += padToLength('CheckDate', 20) +
                        padToLength('Check Date', 20) +
                        padToLength('359', 9) +
                        padToLength('368', 7) +
                        padToLength('10', 12) +
                        content + '\n';
                    break;
                case 7: // VAT Exempt Sales
                    resultPre.textContent += padToLength('ChartOfAccount', 20) +
                        padToLength('Chart Of Account', 20) +
                        padToLength('370', 9) +
                        padToLength('469', 7) +
                        padToLength('100', 12) +
                        content + '\n';
                    break;
                case 8: // Zero Rated
                    resultPre.textContent += padToLength('Debit', 20) +
                        padToLength('Debit', 20) +
                        padToLength('471', 9) +
                        padToLength('488', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
                case 9: // Zero Rated
                    resultPre.textContent += padToLength('Credit', 20) +
                        padToLength('Credit', 20) +
                        padToLength('490', 9) +
                        padToLength('507', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
            }
        });

        // Function to pad a string to a specific length
        function padToLength(str, length) {
            return str + ' '.repeat(Math.max(0, length - str.length));
        }
    </script>

    <script>
        // Get all <tr> elements in the table body (excluding the header row)
        var allTrElements = document.querySelectorAll('tbody tr');

        // Get the pre tag element
        var resultPre = document.getElementById('resultPre');

        console.log("@formattedTotalDebitAmount");
        // Replace the placeholder in the HTML with the actual number of records
        resultPre.innerHTML = resultPre.innerHTML.replace('@numberOfRecords', (allTrElements.length - 1));
        resultPre.innerHTML = resultPre.innerHTML.replace('@amountFieldControlTotal', "@formattedTotalDebitAmount");

    </script>


}