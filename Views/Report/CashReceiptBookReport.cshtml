@model IEnumerable<CashReceiptBook>
@using Accounting_System.Models.Reports
@using Microsoft.AspNetCore.Identity
@using Accounting_System.Utility
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Cash Receipt Book";
    var dateFrom = ViewBag.DateFrom;
    var dateTo = ViewBag.DateTo;
    var lastRecord = ViewBag.LastRecord;

    decimal totalCreditAmount = 0;
    decimal totalDebitAmount = 0;

    var numberOfRecords = 0;
    decimal amountFieldControlTotal = 0;
}
<style>
    body {
        margin: 0 100px 0 0;
        padding: 0;
    }

    .container {
        margin: 0;
        padding: 0;
        max-width: 100%;
    }

    main {
        margin: 0;
        padding: 0;
    }

    footer {
        display: none;
        visibility: hidden;
    }
</style>
<br class="br-top" />
<div class="mx-5">
<pre>
TAXPAYER'S NAME: Filpride Resources Inc.
TIN: 000-216-589-00000
ADDRESS: 57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone, Kalaklan, Olongapo City, 2200 Zambales, Philippines

Accounting System: Accounting Administration System
Acknowledgement Certificate Control No.: @CS.ACCN
Date Issued: @CS.DateIssued
</pre>

<pre id="resultPre">
Accounting Books File Attributes/Layout Definition
File Name: Cash Receipt Book Report
File Type: Text File
Number of Records:                  @numberOfRecords
Amount Field Control Total:         @amountFieldControlTotal
Period Covered:                     @dateFrom to @dateTo
Transaction cut-off Date & Time:    @lastRecord
Extracted By:                       @UserManager.GetUserName(User)!.ToUpper()

</pre>

<h3><b>CASH RECEIPT BOOK</b></h3>
<table class="table-hover w-100" style="margin-top:20px;">
    <thead>
        <tr class="table-bordered">
            <th style="padding: 10px 30px 10px 30px;">
                Date
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.RefNo)
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.CustomerName)
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.Bank)
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.CheckNo)
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.COA)
            </th>
            <th style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.Particulars)
            </th>
            <th class="text-end" style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.Debit)
            </th>
            <th class="text-end" style="padding: 10px 30px 10px 30px;">
                @Html.DisplayNameFor(model => model.Credit)
            </th>
        </tr>
    </thead>
    <tbody>

        @foreach (var cashReceipt in Model)
        {
            <tr class="align-text-bottom">
                <td style="padding: 10px 30px 10px 30px;">
                    @cashReceipt.Date.ToString("MM/dd/yyyy")
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.RefNo)
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.CustomerName)
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.Bank)
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.CheckNo)
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.COA)
                </td>
                <td style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.Particulars)
                </td>
                <td class="text-end" style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.Debit)
                </td>
                <td class="text-end" style="padding: 10px 30px 10px 30px;">
                    @Html.DisplayFor(model => cashReceipt.Credit)
                </td>
            </tr>

            totalCreditAmount += cashReceipt.Credit;
            totalDebitAmount += cashReceipt.Debit;
        }
        <tr class="align-text-bottom" style="border-top: 2px solid black;">
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="text-center"><b>TOTAL:</b></td>
                <td class="text-end" style="padding: 10px 30px 10px 30px;">@totalCreditAmount.ToString("N2")</td>
                <td class="text-end" style="padding: 10px 30px 10px 30px;"><div>@totalDebitAmount.ToString("N2")</div></td>
        </tr>
    </tbody>
</table>

<p style="line-height: 1; margin-top:25px;" class="text-start">
    <em>
        <b>Software Name :</b> Accounting Administration System (AAS)
        <br />
        <b>Version :</b> @CS.Version
        <br />
        <b>Printed By :</b> @UserManager.GetUserName(User)!.ToUpper()
        <br />
        <b>Date & Time Printed :</b> @DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
    </em>
</p>

<a class="btn btn-success" onclick="printPage()" id="printButton" style="margin-top:25px;">Print</a>
<a asp-action="CashReceiptBook" class="btn" id="otherButton" style="margin-top:25px;">Back</a>
</div>
@section Scripts{
    <script>
        function printPage() {
            // Call the print function
            window.print();
        }
    </script>
    <script>
        // Get the first row in the table body
        let firstRow = document.querySelector('tbody tr:first-child');

        // Get all cells in the first row
        let cells = firstRow.querySelectorAll('td');

        // Initialize total character count
        let totalCharacters = 0;

        // Get the pre-tag element
        let resultPre = document.getElementById('resultPre');

        // Append the header for the fields
        resultPre.textContent += 'Field Name          Description         From     To     Length      Example\n';

        // Iterate through each cell in the first row
        cells.forEach(function (cell, index) {
            // Calculate the starting and ending character positions for each cell
            let cellHtml = cell.innerHTML;

            // Exclude spaces from both 'START' and 'END' counts
            let startChar = totalCharacters + 1;
            let endChar = startChar + cellHtml.replace(/\s/g, '').length - 1;

            // Update the total character count
            totalCharacters = endChar + 1; // Add 1 to include the space in the next cell

            let content = cellHtml.trim();

            // Append the result to the pre-tag based on the row index
            switch (index) {
                case 0: // Transaction Date
                    resultPre.textContent += padToLength('Date', 20) +
                        padToLength('Date', 20) +
                        padToLength("1", 9) +
                        padToLength("10", 7) +
                        padToLength("10", 12) +
                        content + '\n';
                    break;
                case 1: // Serial No
                    resultPre.textContent += padToLength('RefNo', 20) +
                        padToLength('Ref No.', 20) +
                        padToLength("12", 9) +
                        padToLength("23", 7) +
                        padToLength("12", 12) +
                        content + '\n';
                    break;
                case 2: // Sold To
                    resultPre.textContent += padToLength('CustomerName', 20) +
                        padToLength('Customer Name', 20) +
                        padToLength("25", 9) +
                        padToLength("124", 7) +
                        padToLength("100", 12) +
                        content + '\n';
                    break;
                case 3: // Tin#
                    resultPre.textContent += padToLength('Bank', 20) +
                        padToLength('Bank', 20) +
                        padToLength('126', 9) +
                        padToLength('225', 7) +
                        padToLength('100', 12) +
                        content + '\n';
                    break;
                case 4: // Amount
                    resultPre.textContent += padToLength('CheckNo', 20) +
                        padToLength('Check No.', 20) +
                        padToLength('227', 9) +
                        padToLength('246', 7) +
                        padToLength('20', 12) +
                        content + '\n';
                    break;
                case 5: // Vat Amount
                    resultPre.textContent += padToLength('COA', 20) +
                        padToLength('Chart Of Account', 20) +
                        padToLength('248', 9) +
                        padToLength('347', 7) +
                        padToLength('100', 12) +
                        content + '\n';
                    break;
                case 6: // Vatable Sales
                    resultPre.textContent += padToLength('Particulars', 20) +
                        padToLength('Particulars', 20) +
                        padToLength('349', 9) +
                        padToLength('548', 7) +
                        padToLength('200', 12) +
                        content + '\n';
                    break;
                case 7: // VAT Exempt Sales
                    resultPre.textContent += padToLength('Debit', 20) +
                        padToLength('Debit', 20) +
                        padToLength('550', 9) +
                        padToLength('567', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
                case 8: // Zero Rated
                    resultPre.textContent += padToLength('Credit', 20) +
                        padToLength('Credit', 20) +
                        padToLength('569', 9) +
                        padToLength('586', 7) +
                        padToLength('18', 12) +
                        content + '\n';
                    break;
            }
        });

        // Function to pad a string to a specific length
        function padToLength(str, length) {
            return str + ' '.repeat(Math.max(0, length - str.length));
        }
    </script>

    <script>
        // Get all <tr> elements in the table body (excluding the header row)
        let allTrElements = document.querySelectorAll('tbody tr');

        // Get the pre-tag element
        let resultPre = document.getElementById('resultPre');

        // Replace the placeholder in the HTML with the actual number of records
        resultPre.innerHTML = resultPre.innerHTML.replace('@numberOfRecords', (allTrElements.length - 1));
        resultPre.innerHTML = resultPre.innerHTML.replace('@amountFieldControlTotal', "@totalDebitAmount.ToString("N2")");

    </script>


}